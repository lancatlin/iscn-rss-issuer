<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WANcatServer</title>
    <link>https://wancat.cc/</link>
    <description>Recent content on WANcatServer</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 27 Mar 2022 11:22:58 +0800</lastBuildDate><atom:link href="https://wancat.cc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>學校該學些沒有用的東西</title>
      <link>https://wancat.cc/post/opportunity-of-learning/</link>
      <pubDate>Sun, 27 Mar 2022 11:22:58 +0800</pubDate>
      
      <guid>https://wancat.cc/post/opportunity-of-learning/</guid>
      <description>學習最重要的是契機，這個契機可以是任何趨使你學習新事物的機會，可能是學校課程，可能是工作需求。當今天有個契機去學習，就把握機會把它學到好，學到回本。雖然這個契機不一定是你喜歡的，但也是個改變自己的機會，既來之，則好好利用之。</description>
    </item>
    
    <item>
      <title>雫教你用婚姻理解比特幣閃電網路</title>
      <link>https://wancat.cc/post/lightning-network/</link>
      <pubDate>Fri, 11 Feb 2022 14:01:42 +0800</pubDate>
      
      <guid>https://wancat.cc/post/lightning-network/</guid>
      <description>吉田春（Yoshita Haru）和水谷雫（Mizutani Shizuku）在經歷多年的風風雨雨後，兩人終成眷屬，準備要結婚了。然而雫想起她那廢物老爸敗家的歷史，又考量春過去突然消失的不良紀錄，希望把兩人的財產算清楚，誰也不吃虧。想要阻止這一切的春就主張：「每次我們之間的轉帳都要經過銀行，手續費太貴了」。誰也想不到精明的雫竟然想到一個方法，可以讓兩人在不需信任彼此（又不用現金）的情況下，利用離婚協議書，完成無須手續費的離線轉帳。
 雫：首先，我們在結婚的時候，要在結婚協議書上載明兩人「帶入多少資產進入婚姻」。
 結婚同意書：
兩人於婚姻中財產：
吉田春：500000
水谷雫：300000
簽名：吉田春、水谷雫 2022.02.10
 雫：接著將這張結婚證書提交到了戶政事務所，我們就會正式結婚了。
春：那要怎麼轉帳呢？
雫：當我們要轉帳時，就要簽一張離婚協議書，寫上新的財產分配。例如當我要轉給你 10000 元時，我們就簽一張離婚協議書：
 離婚協議書：
兩人協議分配財產如下：
吉田春：510000
水谷雫：290000
簽名：吉田春、水谷雫 （尚無時間戳）
 雫：當你要再給我 2000 時，我們再用上張協議書的金額，算出新的餘額。
 離婚協議書：
兩人協議分配財產如下：
吉田春：508000
水谷雫：292000
簽名：吉田春、水谷雫 （尚無時間戳）
 雫：透過這種方式，我們就可以用 0 手續費完成無限多筆交易。因為兩人都已經簽了名，兩人又各自有一份，因此只要任何一方想要，隨時都可以將離婚協議書交到戶政事務所，將財產結算。
春聽了之後毛骨悚然，知道自己随時有可能會被離婚，想要力挽狂瀾。
春：那我跟妳結婚之後，一次都不要簽離婚協議書，妳就拿我沒轍了吧！妳就得一輩子當我老婆！
雫：那可不行，所以你得先簽好第一份離婚協議書，我才會簽下結婚同意書。
春嚇了一跳，翻開雫剛才給他的結婚同意書下面，果真就附了一張離婚協議書。
 離婚協議書：
兩人協議分配財產如下：
吉田春：500000
水谷雫：300000
簽名：吉田春、水谷雫 （尚無時間戳）
 春：不行不行，妳這個作法有個 bug，如果結婚後都是妳給我錢，財產變成例如我 600000、妳 200000，但最後妳卻交了我們一開始的離婚協議書，妳不就淨賺 100000 嗎？
雫聽了後覺得有道理，低頭開始深思。正當春覺得應該可以安心的時候，雫抬起了頭。
雫：你說的有道理，所以我們要加入另外一個保險措施。
雫拿出兩張新的離婚協議書，拿出筆在上方加字。
 離婚協議書（吉田春持有）：
兩人協議分配財產如下：
水谷雫：300000
帳戶 1：500000
過了一個月後，將帳戶 1 的所有錢轉給吉田春</description>
    </item>
    
    <item>
      <title>元宇宙的重點不是 VR，而是區塊鏈</title>
      <link>https://wancat.cc/post/metaverse/</link>
      <pubDate>Mon, 29 Nov 2021 00:50:57 +0800</pubDate>
      
      <guid>https://wancat.cc/post/metaverse/</guid>
      <description>理想元宇宙三要素： 1. 元宇宙必須基於自由軟體與開放標準 2. 元宇宙中的身分與財產必須由個人所擁有 3. 元宇宙的治理必須是民主的。當我們今天面對一個新的元宇宙項目，我們應仔細檢查其是否滿足了這些要求，若任何一項沒有達到，我們都應該拒絕它。</description>
    </item>
    
    <item>
      <title>如何用對數算指數為實數的值</title>
      <link>https://wancat.cc/post/exponentail_of_real_number/</link>
      <pubDate>Sat, 21 Aug 2021 02:48:17 +0800</pubDate>
      
      <guid>https://wancat.cc/post/exponentail_of_real_number/</guid>
      <description>音量單位分貝，定義是聲音的震幅每增加 10 倍，就增加 10 分貝，公式可寫成：
$$ P = 10^{\frac{dB}{10}}P_0 $$
在我們調整音量的時候，不可能每次都調大 10 倍吧？那在中間就會出現指數是小數的情況。例如我們今天若要算
$$ x = 10^{6.3} $$
要怎麼在紙上求得近似值呢？
首先，我們改寫一下式子
$$ x = 10^{0.3} \times 10^6 $$
$$ y = 10^{0.3} $$
$$ x = y \times 10^6 $$
這樣我們就可以先求 y，再回去求 x 了，這麼做是因為對數表上只會有 1 到 10 的值。
根據 log 定義
$$ 0.3 = \log_{10} y $$
透過查表，找到最接近的值是
$$ \log_{10} 2.0 = 0.301 $$
$$ \rightarrow y \approx 2.0 $$
因此 x 的值就會是</description>
    </item>
    
    <item>
      <title>如何推導 Log 換底公式</title>
      <link>https://wancat.cc/post/log_change_of_base/</link>
      <pubDate>Sat, 21 Aug 2021 02:33:10 +0800</pubDate>
      
      <guid>https://wancat.cc/post/log_change_of_base/</guid>
      <description>假設今天我們要算一個 2 的對數，如
$$ x = \log_2 16 $$
$$ \rightarrow 2^x = 16 $$
我們定義
$$ 10^y=2 $$
把第二式帶入第一式
$$ (10^y)^x = 16 $$
$$ 10^{xy} = 16 $$
根據 log 定義，可以得到
$$ xy = \log_{10} 16 $$
$$ x = \frac{\log_{10} 16}{y} $$
又
$$ y = \log_{10} 2 $$
則
$$ x = \frac{\log_{10} 16}{\log_{10} 2} $$
我們就得到了換底公式：
$$ \log_a b = \frac{\log_c b}{\log_c a} $$</description>
    </item>
    
    <item>
      <title>自由的伺服器測速工具 LibreSpeed 安裝教學</title>
      <link>https://wancat.cc/post/librespeed/</link>
      <pubDate>Tue, 10 Aug 2021 16:34:45 +0800</pubDate>
      
      <guid>https://wancat.cc/post/librespeed/</guid>
      <description>自己架站有時候需要了解伺服器的網速實際上有多快，這時可以在伺服器上安裝 LibreSpeed 這套軟體，打開網頁就能測連線到伺服器的速度。LibreSpeed 有 PHP 和 Go 實作，身為 Gopher 當然要用 Go 實作！本篇將以 Go 實作為範例。
Go 安裝 首先要安裝 Go，到 Golang 官網 下載你平台的壓縮檔，Raspberry Pi 選 armv6l，一般電腦要選 amd64，然後將其解壓縮：
wget https://golang.org/dl/go1.16.7.linux-armv6l.tar.gz sudo tar -zxvf go1.16.7.linux-armv6l.tar.gz -C /usr/local 將 Go 加到 PATH 中，打開你的 Shell 設定檔（Bash 是 ~/.bashrc，Zsh 是 ~/.zshrc），在最後加入：
export PATH=$PATH:/usr/local/go/bin 儲存後重開一個 shell，看有沒有成功安裝：
$ go version go version go1.16.7 linux/arm LibreSpeed 安裝 下載並編繹 LibreSpeed
git clone https://github.com/librespeed/speedtest-go.git cd speedtest-go go build -ldflags &amp;quot;-w -s&amp;quot; -trimpath -o speedtest main.</description>
    </item>
    
    <item>
      <title>從零開始的 Nextcloud 完整安裝教學</title>
      <link>https://wancat.cc/post/raspi-nextcloud/</link>
      <pubDate>Sat, 07 Aug 2021 13:12:54 +0800</pubDate>
      
      <guid>https://wancat.cc/post/raspi-nextcloud/</guid>
      <description>用兩顆外接硬碟組 RAID 1，設定 DDNS、Nginx，並安裝 Nextcloud，以及後續的 PHP 調校與 Redis 快取。</description>
    </item>
    
    <item>
      <title>過早的優化是萬惡的根源</title>
      <link>https://wancat.cc/post/premature-optimization/</link>
      <pubDate>Tue, 03 Aug 2021 10:15:54 +0800</pubDate>
      
      <guid>https://wancat.cc/post/premature-optimization/</guid>
      <description>有次我要開發一個規劃時間的演算法，需要將時間切割成一個一個單位做計算，這時普通的作法會是用布林陣列來儲存每個時間點，然而我需要對時間做一些 AND、OR、NOT 的布林運算，我當時突發奇想，假如用 BigInt 來儲存效能和記憶體都會省下不少，意思是將一個整數視作一個布林陣列，每一個位元就代表一個時間單位，這樣相比用布林陣列，足足省下至少 8 倍的記憶體。我心裡覺得這真是太酷了，於是就一股腦開發基於 BigInt 的演算法。
BigInt 由於本來就不是陣列，不論是讀值、改值都相當因難。以讀取第 i 項的值為例，需要寫成：
// normal index array[i]; // bigint index const n = 0b10111000; (n &amp;gt;&amp;gt; i) % 2; // ??? 看起來不直觀、可讀性差、又容易出現差一錯誤。debug 時也相當難纏，直接把 BigInt 印出來，會得到一個巨大十進位整數（本來它就是 Big Int 嘛），需要額外呼叫方法將其以二進位顯示，後來我還將其封裝成一個類別，花了好大力氣寫 unit tests、各種 debug function，最後終於將演算法給實作出來了，花了整整兩週的時間（side project 嘛）。
正當我得意於自己的成果時，遭到現實衝擊——我們使用 React Native 來開發 Mobile App，而 BigInt 是新語法，React Native 還沒有支援。我耗費好幾個小時嘗試各種偏方，然而都不得好轉，最後在無耐之下只好將演算法用陣列重寫。原先以為會天崩地裂、再花上一週的時間，然而由於我有非常多的單元測試，我竟然只用一個下午就將整個演算法改寫完了，比我研究如何在 React Native 跑 BigInt 的時間還少，而改寫後程式的可讀性也提升了不少，那效能呢？由於這是個跑在 client 端的演算法，效能根本不重要，使用體驗毫無差別，省下那一點點記憶體也一點用都沒有。
「過早的優化是萬惡的根源」，在不存在效能瓶頸時就做優化，結果適得其反。比起效能，應該以可讀性優先。
此外，單元測試真的很重要。</description>
    </item>
    
    <item>
      <title>在 Python 中實作對話型聊天機器人</title>
      <link>https://wancat.cc/post/python-chatbot-context/</link>
      <pubDate>Thu, 29 Jul 2021 16:13:36 +0800</pubDate>
      
      <guid>https://wancat.cc/post/python-chatbot-context/</guid>
      <description>當你在開發一個聊天機器人，有時候為了使用者體驗，你不能要使用者用像指令的方式，將所有資訊一次傳過來。舉例來說，若我們要開發一個猜數字遊戲運作如以下：
 user: guess
bot: From what number?
user:: 25
bot: To what number?
user: 100
bot: Guess a number between 25 to 100
user: 64
bot: too small
user: 91
bot: too large
&amp;hellip;&amp;hellip;
user: 83
bot: Correct! You spent 6 times to guess this number.
 然而，我們在後端通常是「一個請求一個回覆」，如果要將這樣的行為拆成多個 handler 將會是場災難，為什麼？想想要怎麼存狀態，全域變數？資料庫？還是 Redis？每當你多問使用者一個問題，你就得在你的 state schema 新增一個欄位，讓你的程式碼越來越複雜。
接下來，我會告訴你如何用一個非常輕鬆的方式處理對話，讓你只要寫像以下一般的程式碼就能達成。
def guess(self): &amp;#39;&amp;#39;&amp;#39;Game function&amp;#39;&amp;#39;&amp;#39; min_value = self.ask_number(&amp;#39;From what number?&amp;#39;) max_value = self.ask_number(&amp;#39;To what number?&amp;#39;) secret = randint(min_value, max_value) msg = f&amp;#39;Guess a number between {min_value} to {max_value}&amp;#39; counter = 0 while True: counter += 1 answer = self.</description>
    </item>
    
    <item>
      <title>基本收入不能解決貧富差距，又如何？</title>
      <link>https://wancat.cc/post/ubi-wealth-gap/</link>
      <pubDate>Thu, 08 Jul 2021 10:07:09 +0800</pubDate>
      
      <guid>https://wancat.cc/post/ubi-wealth-gap/</guid>
      <description>當我們用「翻轉」一詞，其實就已經隱含了單一的價值觀：有錢就是高社會階級</description>
    </item>
    
    <item>
      <title>Django 將 Stdout 導向 Streaming Response</title>
      <link>https://wancat.cc/post/django-redirect-stdout-to-streaming/</link>
      <pubDate>Tue, 25 May 2021 11:28:37 +0800</pubDate>
      
      <guid>https://wancat.cc/post/django-redirect-stdout-to-streaming/</guid>
      <description>有時候後端要執行一個時間比較長的任務，而任務內容極為複雜，又容易出錯，因此希望讓使用者看到即時的 console log，讓我們函式中的 print 輸出能即時傳到使用者的瀏覽器。
以下將會以 Django, Thread, Queue 進行實做
StreamingHttpResponse 一般的網頁請求都是一次打包好所有資料，全部傳給使用者，有些情況我們不能等到所有資料準備好才一次傳，而要拿到一些就傳一些，這個時候我們就要使用串流輸出，在 Django 裡，就是使用 StreamingHttpResponse，以下簡稱 SHR。SHR 接收一個 Iterator 作為輸入，因此我們只要實做一個迭代器函式，其中每次 yield 就會由 SHR 傳送到瀏覽器
# Example of StreamingHttpResponse from django.http.response import StreamingHttpResponse def example(): for i in range(5): # Add &amp;lt;br&amp;gt; to break line in browser yield f&amp;#39;{i}&amp;lt;br&amp;gt;&amp;#39; def stream(request): return StreamingHttpResponse(example()) Output (in browser):
0 1 2 3 4 Thread 由於我們的程式需要一邊執行目標任務，一邊串流輸出，因此需要平行化執行。Python 中可以使用 threading, multiprocessing 等方式做平行化執行，本文將使用 threading。
# Example of threading from threading import Thread import time def example(times): for i in range(times): print(i) time.</description>
    </item>
    
    <item>
      <title>減法的藝術</title>
      <link>https://wancat.cc/post/the-art-of-subtraction/</link>
      <pubDate>Sun, 18 Apr 2021 09:23:46 +0800</pubDate>
      
      <guid>https://wancat.cc/post/the-art-of-subtraction/</guid>
      <description>這時我才終於體會了老師口中的「有捨才有得」，若無狠心除去那些無關的枝葉，最可貴的美就會被埋沒。園藝是如此，創作又何嘗不是呢？</description>
    </item>
    
    <item>
      <title>母語者心態</title>
      <link>https://wancat.cc/post/native-speaker/</link>
      <pubDate>Fri, 19 Mar 2021 20:30:53 +0800</pubDate>
      
      <guid>https://wancat.cc/post/native-speaker/</guid>
      <description>這些方法也許的確有效，但並不是所有人都能做到我們認為輕而易舉或理所當然的事，當帶著這樣的「母語者心態」看別人，就容易將他人的不成功歸因到不夠努力的結果，卻沒想到也許對方根本做不到。</description>
    </item>
    
    <item>
      <title>每日一問：如果世界是個函數</title>
      <link>https://wancat.cc/post/if-the-world-is-a-function/</link>
      <pubDate>Sun, 07 Mar 2021 21:28:38 +0800</pubDate>
      
      <guid>https://wancat.cc/post/if-the-world-is-a-function/</guid>
      <description>若是每個現在都會對應到唯一的未來，那每個過去也都會導向唯一的現在，因此回推到宇宙的開端，就可以得到一個結論：現在發生的一切都是在大霹靂時就註定了。那我們所謂的自主意識，也全都只是空談。</description>
    </item>
    
    <item>
      <title>每日一問：為什麼新年定在 1/1？</title>
      <link>https://wancat.cc/post/history-of-calendar/</link>
      <pubDate>Sat, 23 Jan 2021 11:55:47 +0800</pubDate>
      
      <guid>https://wancat.cc/post/history-of-calendar/</guid>
      <description>Photo by Aaditya Arora from Pexels
這個標題也許令人誤解，1/1 本來就是一年的開始啊？當然，但為什麼我們會選擇一個冬天的日子作為一年的開始，而不是某個春天、夏天、秋天的日子呢？陽曆以地球的公轉為依循，地球每繞太陽一圈就是一年，一年之中所謂「特別」的日子，應該會是春分、夏至、秋分、冬至等等，但 1/1 卻不是什麼特別的日子，甚至以季節來說，我們通常會認為 12、1、2 月是冬天，3 月開始才是春天，為什麼會將新年定在一個季節的「中間」呢？
下一個猜想：也許是由於某種歐洲世界的歷史因素？直覺會想到的可能是「耶穌誕生」，畢竟西元的紀年「名義上」就是以耶穌誕生為始（儘管這與史實有些差距），但這也有矛盾之處：我們之所以能說「耶穌於 12/25 日出生」，就證明了陽曆是早於耶穌誕生的，否則就應該會是「我們將耶穌誕生之日定為 1/1」。
如果把陽曆跟農曆做比較，就會發現這個巧合更加神奇，農曆是以月亮的公轉作為依循，一年的長度與陽曆不盡相同，然而農曆的「新年」和陽曆定在差不多的時間，都是在冬天的中間，但是農曆的新年是有天文意義的，新年之時月亮是朔月，但一年有 12 個月，為什麼不定在其他的月份？不同文化將「新年」這個概念定在差不多的時候，這背後有什麼關聯嗎？
我想到的可能性是農業社會的生活型態，在較高緯度的農業社會中，冬天是休耕期，一年到頭的辛勤的工作，在冬天時應當能稍微喘息，而歷經了作物一年的生長與收割，在這個時候特別會有「結束」之感，而實務上來說，若要「慶祝新年」，選擇在冬天的中間進行也很合理，因為工作量比較少，慶祝完後就可以迎接春天的到來，因此自然而然成為了北半球新年的「熱門選擇」。由此推廣，南半球的文明是否也會選擇當地冬天轉春天的時候作為新年呢？
知道為什麼新年要定在冬天了，但是為什麼恰好定在現在的 1/1，而不是早一天或晚一天呢？這聽起來或許強詞奪理，但我們要意識到，人類社會要取得廣泛的共識是很難的，通常能夠廣泛被認可的制度都來自某些自然觀察，例如十進制來自於人類有十根手指、一週七天來自地球上可以肉眼觀察到的「特殊星球」有七顆，否則就是出於歷史因素，並由強勢文化擴散到世界各地。
現代公曆的歷史 根據維基百科，我們現今所使用的公曆——格里曆，是在公元 1582 年由義大利醫生阿洛伊修斯．里利烏斯改良儒略曆所制定、並由教皇所頒布的。其改良內容主要是對閏年規則的修正，沒有改變新年的時間點，因此再往上追，儒略曆是羅馬的羅馬共和國獨裁官儒略．凱撒採納希臘數學家索西琴尼所計算出的曆法，在那之前羅馬的曆法相當的混亂，與太陽的公轉週期已經相差甚遠，而 1/1 則是定在凱撒執政官上任之日。
我們發現這跟先前的推測相當接近，1/1 的制定是出自歷史因素，且格里曆其實是相當晚期才被全世界採用，日本於 1873 年採用格里曆，而中國則是在中華民國於 1912 年成立後開始採用格里曆，在這個時機做出改變，明顯是來自歐洲強勢文化的影響，這也驗證了我們先前的猜想。
現代的不同曆法 其實在現代，也有國家是採取不同的曆法，例如伊朗所使用的伊朗曆，就是以春分作為一年開始的太陽曆（取自天文觀察）；或是許多伊斯蘭國家所使用的伊斯蘭曆，跟中國傳統的農曆一樣是以月亮的公轉作為依循，並將新月定為一個月的開始（農曆是朔）。
除此之外，現代也有對曆法改革的提議，對紀年的改革有學者塞薩爾．埃米利安尼提出的人類紀年（又稱全新世紀年），將現有的年加上 10000 作為新的紀年，例如 2021 就會變成 12021，選擇這個時間點，是因為人類紀年的元年是最後一次冰河期的結束，也是新石器時代的開端。此外這種曆法包含了 0 年，讓數軸變得完整。
對紀月的改革有企業家喬治．伊士曼所推行的國際固定曆，將每個月定為 4 個星期 28 天，一年 13 個月，這樣只有 364 天，因此再添加最後一天「年日」作為一年的結束，年日不屬於星期中的任何一天，國際固定曆的特色是日期將始終落在一週中的同一天，且非常易於計算（除以 7 的餘數）。
這些提案雖然到現在仍處於討論階段，尚未獲得共識，但打破了我過去對曆法「本來就是這樣」的想法。曆法是一種制度，是由人所制定的，過去曾經歷多次的曆法改革，現今也有不同國家使用著不同的曆法，這些都告訴我們即使像曆法這般有如文化根基的制度，也是可以被改變的。如果是你，會期待什麼樣的曆法呢？
參考資料  曆法 格里曆 儒略曆 伊朗曆 伊斯蘭曆 國際固定曆 人類紀年（全新世紀年）  </description>
    </item>
    
    <item>
      <title>越是討厭越該努力</title>
      <link>https://wancat.cc/post/more-hate-more-hard-working/</link>
      <pubDate>Fri, 04 Dec 2020 23:38:01 +0800</pubDate>
      
      <guid>https://wancat.cc/post/more-hate-more-hard-working/</guid>
      <description>這個學期學校課程增加了許多，有一些課程一上就連上四堂，又是單方面的聽課，實在沉不住氣，不是睡覺就是滑手機。在五專待了一年後，我感染了大學的委靡之氣，竟抱持著「教授不會當人」的僥倖心態，想要得過且過，過了大半學期卻對課程內容幾乎沒有了解。就連到了期中考，也只在前一天晚上看看投影片，勉強考了個及格分數，心中卻還十分得意，毫無悔意。
直至今日，我缺交一項本該在上週就該完成的作業，時間緊迫，只好拿同學的檔案改名字。這本來也沒什麼，畢竟這項作業寫出來大家應該也都會差不多，然而從小到大，我最引以為恥的就是抄作業了，如今自己卻落入這般田地。交完作業後，我開始反思自己究竟這半個學期是怎麼度過的？上課不聽、睡覺滑手機，考試前才急急忙忙的抱佛腳。覺得上這門課很浪費時間，然而卻未善加利用上課時間學習，若能在上課時間就將課程內容學好，不花額外的課餘時間去唸書，不才是對我最有利的嗎？
於是在今天的課程，我將手機關機，拿出筆記本認真作筆記，下課向老師請教，搞清楚每個不懂的地方，實習時認真動腦思考，快速的做出成品，提早下課。我花了更少的時間，學到了更多的內容，而且心中感到充實。除了學習今天教的內容，我也利用空檔時間，去回顧之前自己沒認真看的地方，節省未來需要額外花時間讀的時間。
利用上課的時間把上課的內容學好，將課餘時間留給自己真正想做的事，這個我從國中至今變奉行的道理，為什麼在上了五專後忘記了呢？認為自己已清楚志向，便不願投入心力去學看似無關的學科；不滿於教學模式，卻也不願去跟教授討論；課餘時間忙於音樂，便認為有藉口在上課偷懶。我忘卻了過去自己所相信的信念：所有的學習都是增加自己的視野。既然非學不可，那就將它一次學好；既然要學，那就學到你能從中獲得超過其本身的價值。我警惕自己，未來不要再落入這樣得過且過的心態，認真的看待每一次學習。越是討厭它，越該努力將它學好！</description>
    </item>
    
    <item>
      <title>2020 赤弦獎比賽心得</title>
      <link>https://wancat.cc/post/red-string-2020/</link>
      <pubDate>Sun, 22 Nov 2020 18:02:26 +0800</pubDate>
      
      <guid>https://wancat.cc/post/red-string-2020/</guid>
      <description>今天我與班上同學 Annie 參加北科的民歌比賽——赤弦獎，我們報名高中演唱組，Annie 擔任主唱，我則是吉他手。我原先想報的其實是創作組，然而創作組只有大專才有，專一到專三只能報高中組，後來 Annie 就找我去參加高中演唱組。
比賽結果是沒有入圍，我想主因還是表演本身不夠特別，我吉他基本上就只是看 91 譜，然後壓出最簡單的和弦，刷法上的變化也不多，也沒有什麼指彈的旋律，呈現出來的很普通。在比賽的前一週社團的學長姐給了我一些建議，調整了副歌的刷法，但可能還是難以改變整體缺乏特色的問題。評審指出了幾個可以改進的地方，包括刷法的變化、層次不足，還有我與 Annie 的搭配需要更緊密。我們這次比賽沒有指導老師，練習過程也缺乏檢討，因此常常找不到進步的方向，
我自今年暑假開始學吉他，至今快四個月，然而我自滿於當前的狀態，自從開學以來毫無長進，我想主要原因可能是我疏於練別人的歌，因此技巧停留在基礎的程度，甚至基礎也不如——封閉和弦都還沒辦法按得很穩定。這學期加入社團，將時間投入去學習新的樂器，電吉他、貝斯、爵士鼓，然而每一樣都沒有充分的時間練習，學習的效果跟暑假時每天練吉他兩個小時相比實在相差太多了。之所以學那麼多樂器，倒不是想樣樣精通，而是為了編曲要對各種樂器有點概念，如此而已。
我想以我的目標——成為創作歌手——而言，學好木吉他應該會是最優先的事項，畢竟初期創作會多以自彈自唱為主，能不能編出豐富的吉他會大大的影響到作品的好壞。因此接下來我需要加強吉他的訓練，要多練習別人的作品，並有系統的從中學習到技巧，將其應用於自己的作品，可能也會再去上一對一的吉他課，比起社團的大班課，一對一還是最能夠進步。但我想先自己努力看看，去請教社團的學長，等到自己已經無法更進一步了，再去上課。
希望這次比賽可以作為一個契機，激勵我在吉他上更加努力。</description>
    </item>
    
    <item>
      <title>專案介紹：排列組合計算機</title>
      <link>https://wancat.cc/post/combine_generator/</link>
      <pubDate>Wed, 17 Jun 2020 23:44:48 +0800</pubDate>
      
      <guid>https://wancat.cc/post/combine_generator/</guid>
      <description>近來數學課在教排列組合，排列組合不簡單，很難考慮周全，因此我設計了一個排列組合計算機，根據設定條件窮舉出所有可能，並一一列出。
排列組合計算機
GitHub 與使用教學
我覺得這個工具對於學習排列組合蠻有幫助的，當然工具沒辦法教你排列組合，但是可以通過觀察結果來促進思考，或找到沒考慮周全的地方，以及驗證題目是否正確。
其實用電腦窮舉不難，只是排列組合的題目變化多，難以用一個程式解出所有題目，但我發現其中基本上都可以分成兩個部份：窮舉與篩選，先窮舉出所有結果，再將結果進行篩選。窮舉基本上大同小異，就是排列/組合、重複/不重複，每個題目不一樣的主要是篩選的部份，因此我設計讓使用者自己在網頁上用 JavaScript 寫篩選器，這樣各種複雜的條件都能做出來，這裡是運用 JavaScript 的 eval() 函式，可以將一個字串轉成 JavaScript 語句，這感覺超不安全的，但既然不是在伺服器端，應該不會有什麼資安疑慮，程式若是失控，請使用者自行負責。
整個專案就是一個靜態網頁，託管在 GitHub Page，程式在瀏覽器端執行運算，整個專案相當簡短，全部 JavaScript 不過一百多行。由於排列組合的結果數上升得很快，我有做一個簡易的保護機制，確保總運算量不會超過十億，在這之前我多次搞到 RAM 吃光，整台電腦當機（但主因是 VSCode 和 TabNine 吃太多記憶體）。
使用上由於要寫 JavaScript，或許會有些門檻，但畢竟只是對陣列數值做加總、判斷，我在 GitHub 上有提供一些範例，應該參考一下就會寫了。
如果這個工具對你有幫助，希望你幫我拍手或是到 GitHub 上給個星星！</description>
    </item>
    
    <item>
      <title>Raspberry Pi 安裝 WordPress 教學</title>
      <link>https://wancat.cc/post/wordpress-installation/</link>
      <pubDate>Sun, 17 May 2020 22:17:08 +0800</pubDate>
      
      <guid>https://wancat.cc/post/wordpress-installation/</guid>
      <description>WordPress 是一套自由的網站系統，可以安裝在自己的伺服器，以下是我在 Raspberry Pi 上安裝 WordPress 的記錄。
請先安裝好 MariaDB / MySQL、PHP 7.3 以上、Caddy。
到官網複製壓縮檔連結（我偏好 tar.gz）
cd Downloads wget https://wordpress.org/latest.tar.gz sudo tar -zxvf latest.tar.gz -C /var/www sudo chown -R www-data:www-data /var/www/wordpress 接著建立 MySQL 使用者：
sudo mysql &amp;gt; create database wordpress; &amp;gt; create user &#39;wordpress&#39;@&#39;localhost&#39; identified by &#39;password&#39;; &amp;gt; grant all privileges on wordpress . * to &#39;wordpress&#39;@&#39;localhost&#39;; &amp;gt; flush privileges; 接下來將域名綁定到 Web Server，這邊我們使用 Caddy
yourhostname.com { root /var/www/wordpress gzip fastcgi / /var/run/php/php7.</description>
    </item>
    
    <item>
      <title>近視眼鏡是近視惡化的元兇——霧視法介紹</title>
      <link>https://wancat.cc/post/fogging_method/</link>
      <pubDate>Sun, 26 Apr 2020 10:44:00 +0800</pubDate>
      
      <guid>https://wancat.cc/post/fogging_method/</guid>
      <description>你有近視嗎？你近視多深呢？在現代社會我們幾乎不可能避免近距離用眼，從書本、電腦到手機，我們一天幾乎所有時刻眼睛都是聚焦在近處。但你有想過，究竟為什麼人類會「近視」？又為什麼近視會一直不斷加重呢？
事實上導致你近視不斷加重的原因，其實就是你的近視眼鏡！
近視是什麼 近視是遠方影像無法成像在視網膜上的現象，分為真性近視跟假性近視，假性近視是控制水晶體的睫狀肌長時間用力，無法放鬆所導致的「暫時性」近視，可透過散瞳劑、望遠凝視等方式放鬆；然而真性近視則是眼軸拉長、視網膜後退，是沒有辦法回復的永久性殘疾。
你有想過為什麼人會近視嗎？我認為，近視其實是一種身體的進化。
眼睛之所以能夠看遠又看近，是因為我們的水晶體是一個可調整焦距的凸透鏡，透過睫狀肌去控制水晶體的厚度，要看遠就放鬆，讓水晶體變平，要看近則是用力，讓水晶體變厚。
我們在看近的時候，睫狀肌需要用較大的力氣去拉動水晶體，這對眼睛是一件吃力的事。因為我們長時間都在看近處，身體為了減輕負擔，於是將眼軸拉長，但代價就是看不清楚遠處。
這個說法沒有科學研究證明，但一個可以輔佐的證據是近視好發於成長期，過了成長期之後之後，沒有近視的人就不太會近視了，就可以解釋為身體在成長期為了適應環境而近視。
眼鏡的原理 同時討論眼鏡和眼睛相當複雜，因此我將運用虛像的概念來聚焦重點，不同的眼鏡會讓物體產生不同大小遠近的虛像，而我們眼睛對焦的是虛像而非物體本身。
近視眼鏡——也就是凹透鏡——會將物體的虛像拉近、縮小。因為距離縮短了，所以看不清楚遠的人就看得清楚了，但不是因為近視被「矯正」了，而是因為虛像變近了。
遠視眼鏡——也就是凸透鏡——會將物體的虛像拉遠、放大。因為距離拉長了，所以看不清楚近的人就能夠看得清楚了。
近視眼鏡如何加重近視 根據前面的討論，我們有兩個結論：一、眼睛對焦的是虛像，二、近視眼鏡將虛像距離拉近。由此可知，當我們戴著近視眼鏡看著近距離的物體，它的虛像比我們實際上的距離還要來得更近，相當於你用更近的距離在看它。
我們因為看不清楚遠的而配戴眼鏡，卻又因為不拿下眼鏡而長時間看著更近的地方，陷入近視不斷加重的惡性循環。最終導致我們連桌面都看不清楚，非依賴眼鏡不可。
所以我們必須正確認知近視眼鏡的用途：讓我們看清楚遠處，只要不是在看遠的時候，就把它取下，只有如此才能跳脫近視不斷加深的惡性循環。
用「霧視法」預防近視 還記得我們剛才提到凸透鏡是將物體的虛像拉遠，因此我們可以透過在看近時配戴凸透鏡，拉長虛像的距離來避免近視。
雖然都是戴眼鏡，但這個作法只需要在長時間看近時戴眼鏡，平常不需要配戴，因此就不會有戴眼鏡時運動、吃湯麵不方便的問題。凸透鏡，也就是遠視眼鏡和老花眼鏡。霧視法所使用的凸透鏡，我們通常稱之為閱讀鏡，但本質上是相同的。
霧視法分為「近霧視法」與「遠霧視法」，以鏡片的度數和配戴情境區分。近霧視法配戴度數低的凸透鏡，在看近時配戴，用於減輕看近時的負擔；遠霧視法則是配戴度數高的凸透鏡，戴上後視野裡的所有物體都會是模糊的，效果相當於高強度的望遠凝視，要每天配戴二十分鐘來放鬆睫狀肌。
遠霧視法由於配戴期間難以做其他事，較難堅持；近霧視法則是在看近時戴上眼鏡即可，不會花額外精神，因此較容易做到。
我從一年前開始做近霧視法，效果十分顯著，以前長時間近距離用眼後，都會出現假性近視，看不清楚遠方。但如果有戴著閱讀鏡，在拿下眼鏡後，都不會有任何假性近視的症狀。
由於凸透鏡的成像原理，物體只有在焦距內才會是「虛像」，因此閱讀鏡只能看清楚焦距內的物體，因此挑選合適的焦距就會是個重要的工作，如果焦距太短，則什麼都看不清楚，焦距太長，保護效果就會打折扣。
下表為鏡片度數與遠點距離的對應表，遠點距離就是可以清楚的最遠距離，超過遠點的影像就會變得模糊。資料來源：預防近視網
   度數 遠點距離（cm）     平光 無限遠   25 400   50 200   75 150   100 100   125 87.5   150 75   175 62.5   200 50   300 33.</description>
    </item>
    
    <item>
      <title>專案介紹：Fever Pass 體溫登記系統</title>
      <link>https://wancat.cc/post/fever-pass-intro/</link>
      <pubDate>Sun, 29 Mar 2020 19:56:21 +0800</pubDate>
      
      <guid>https://wancat.cc/post/fever-pass-intro/</guid>
      <description>Fever Pass 是我們團隊 Linchpins 在 2020 年初，為了因應新型冠狀病毒開發的一套體溫登記系統，用於協助各級機關、學校自主登記體溫。
GitHub Repository。可以在我們的 demo 試用本系統，用以下帳號登入：
 導師 紀體溫 帳號 t101 密碼 10100 學生 梁體溫 帳號 1081201 密碼 10141 護理師 護理師 帳號 nurse 密碼 nurse  歡迎體驗 demo 的各種功能。demo 每日早上八點會幫所有帳號隨機登記體溫。
Fever Pass 是一個自由且開放原始碼的專案，使用 Go 語言撰寫，以網頁界面進行操作。可以讓機構中的成員自主登記體溫，也可由管理員登記他人體溫。
目前 Fever Pass 被臺中一中使用，自主健康管理-體溫登錄全面電腦化-『Fever Pass體溫記錄系統』
 Fever Pass 有清晰的統計頁面，可以看到每日的登記情況，快速找出發燒與未登記的人員。
Fever Pass 有豐富的權限設計，分為體溫管理權限和帳號管理權限，以這些為基礎組成許多預設的身份組，用來滿足各式各樣的管理需求。
   職稱 身份 體溫記錄權限 帳號管理權限 重置密碼     admin 管理員 全校 全校 全校   護理師 教職員 全校 個人 個人   教職員 教職員 個人 個人 個人   導師 教職員 班級 班級 班級   衛生股長 學生 班級 班級 班級   學生 學生 個人 個人 個人    歡迎有需要的機關或學校自行安裝使用，希望這個系統能夠幫助更多人度過這次疫情，也歡迎志願者貢獻此專案。若需要代為安裝或是佈署，請來信 linchpins-team@protonmail.</description>
    </item>
    
    <item>
      <title>elementary OS 啟用 System Tray</title>
      <link>https://wancat.cc/post/elementary-system-tray/</link>
      <pubDate>Wed, 12 Feb 2020 19:15:22 +0800</pubDate>
      
      <guid>https://wancat.cc/post/elementary-system-tray/</guid>
      <description>elementary OS 是一個好看、易用的 Linux 發行版，然而它有一個缺點：系統狀態欄（system tray）無法顯示其他應用程式的 icon，這導致像輸入法、Discord 等有使用 system tray 的程式無法使用完整功能。最討厭的莫過於 HP 印表機驅動 HPLIP，每次開機就跳出來說 no system tray deteched，非常煩人。
原因是 elementary OS 基本上不希望其他應用程式去使用 system tray，並且停止支援 Ayatana Indicator API，做出相同決定的還有 GNOME，參考 Status Icons and GNOME。
安裝 Ayatana Indicator sudo add-apt-repository ppa:yunnxx/elementary sudo apt update sudo apt install indicator-application wingpanel-indicator-ayatana  編輯 /etc/xdg/autostart/indicator-application.desktop 加入 Pantheon
OnlyShowIn=Unity;GNOME;Pantheon;  接下來重新啟動 X 或是重開機
sudo service lightdm restart # or reboot  完成後 elementary 就可以顯示各個應用程式的圖示了！
References How to display system tray icons in elementary OS Juno?</description>
    </item>
    
    <item>
      <title>在 Raspberry Pi 安裝 Nextcloud</title>
      <link>https://wancat.cc/post/nextcloud-installation/</link>
      <pubDate>Tue, 11 Feb 2020 14:40:06 +0800</pubDate>
      
      <guid>https://wancat.cc/post/nextcloud-installation/</guid>
      <description>Nextcloud 是一套自由的雲端硬碟系統，可以讓你自己架設像 Google Drive、One Drive 一般的雲端硬碟，將資料掌握在自己手中，本篇紀錄如何在樹梅派安裝 Nextcloud。
安裝 到官方網站下載壓縮檔
sudo unzip -d /var/www nextcloud-18.0.0.zip sudo chown www-data:www-data /var/www/nextcloud  PHP 安裝 PHP 依賴模組
sudo apt install php-gd php-json php-mysql php-curl php-mbstring php-intl php-imagick php-xml php-zip  參閱 官方文件 檢查依賴的 PHP 模組，或是擴充功能像是 smb、ldap 等等。
MySQL 建立 Nextcloud 的資料庫和使用者
$ sudo mysql &amp;gt; create database nextcloud; &amp;gt; create user &#39;nextcloud&#39;@&#39;localhost&#39; identified by &#39;password&#39;; &amp;gt; grant all privileges on nextcloud . * to &#39;nextcloud&#39;@&#39;localhost&#39;; &amp;gt; flush privileges;  Caddy 複製 Caddy 提供的 Nextcloud Caddyfile 到 /etc/caddy/Caddyfile，接著修改成你自己的域名、PHP 路徑。我的設定檔如下：</description>
    </item>
    
    <item>
      <title>用 TOTP 擺脫簡訊驗證碼：安全好用的兩步驟驗證</title>
      <link>https://wancat.cc/post/totp/</link>
      <pubDate>Fri, 07 Feb 2020 19:22:30 +0800</pubDate>
      
      <guid>https://wancat.cc/post/totp/</guid>
      <description>兩步驟驗證 隨著數位身份在生活中的影響力愈來愈大，只靠著一組密碼來保護我們的帳戶已經不夠安全，而且記密碼實在是違反人腦天性的行為，因此大部分人總是使用重複的、好記的脆弱密碼。要解決這個問題，除了使用密碼管理工具來幫你記密碼，還可以透過設定兩步驟驗證（2FA：Two-Factor Authentication），大大提昇帳戶的安全性。
兩步驟驗證就是在密碼之外，多用一個資訊來驗證你是本人，主流的作法有像 Email、簡訊驗證信，但用過的人可能都會覺得登入時要開信箱收信很麻煩，信箱也會被這些信件給弄亂，更別提當人在國外時，簡訊收不到害你無法登入。
今天要介紹的 TOTP: Time-based One-Time Password algorithm，就是一種公開的標準，讓你透過手機上的 APP 產生一組 6 位數的一次性驗證碼進行登入，而且在沒有網路的情況下還能使用！
TOTP 如何運作？ TOTP 的概念，就是網站與你事先約定好一組金鑰，並以當下的時間作為參數，運算出一個雜湊值，並取最後 6 位數作為一次性密碼。
然而如果網站和使用者的時間不同的話，就無法計算出相同的結果，因此通常會以 30 秒作為一個單位，來避免使用者與網站的時間差。網站為了良好的使用者體驗，通常也會允許前一次的一次性密碼。
TOTP 的優點 TOTP 它是一個公開標準，你不需要依賴單一企業或組織，各種客戶端都能相容；它的安全性基於密碼學，而非第三方機構的信用；它是去中心化驗證，整個驗證流程只有要驗證身份的雙方而已。
Google 可以讀你的 Gmail，簡訊也可以被政府或通訊業者攔截，然而 TOTP 不需要依賴中介機構，甚至在離線的情況下也仍然可用。
同時對於服務提供者而言，TOTP 也很容易實做，不需要花錢去發簡訊或是寄 Email 被當成垃圾郵件，也不需要跟第三方機構申請，是個省錢又安全的好方法。
開始使用 TOTP 儘管目前懂得使用 TOTP 的使用者並不多，但其實已經有相當多網站支持以 TOTP 作為驗證方式，例如 Google、Facebook、Apple、Amazon、GitHub、PayPal 等，我管理伺服器需要用到的 CloudFlare、Linode、Porkbun 也都有設定 TOTP 來提高安全性。
開始使用的第一步是下載一個 TOTP 的應用程式，有非常多的選項，我自己使用的是 Authy，界面簡單易用，提供加密的雲端備份，此外還有 Google Authenticator、Microsoft Authenticator，自由軟體則有 Red Hat 開發的 FreeOTP，先前在密碼管理工具提到的 Bitwarden 的付費版也有提供 TOTP 的功能。
安裝好驗證器後，到你要登入的網站或 APP 的帳號設定中，啟動兩步驟驗證，在不同網站中，可能會以「驗證應用程式」、「谷歌驗證器」、「代碼產生器」等名稱出現，但背後都是 TOTP 這套標準，流程也很簡單，網站會將金鑰以 QR Code 的方式顯示，打開手機上的驗證器程式掃描就可以加入帳號，並輸入產生的一次性密碼供網站確認，就可以完成綁定。網站若是在手機上，則可以用「複製金鑰」的方式來手動輸入金鑰。</description>
    </item>
    
    <item>
      <title>Caddy 安裝教學</title>
      <link>https://wancat.cc/post/caddy/</link>
      <pubDate>Tue, 04 Feb 2020 10:39:46 +0800</pubDate>
      
      <guid>https://wancat.cc/post/caddy/</guid>
      <description>Caddy 是一個由 Go 撰寫的 Web Server，其主要賣點是簡單的設定檔，適合在開發環境中快速架設，還有自動 HTTPS 的功能，相當方便。
我之前在 Linode 上就使用 Caddy，覺得體驗相當好，因此這次也選擇使用它。
安裝 到 Caddy 網站的下載頁面，複製 One-step installer script 就可以一鍵安裝。
curl https://getcaddy.com | bash -s personal 如果是要拿來當開發環境中的 Web Server，這樣就足夠了，但我要讓它在背景執行，因此還需要設定好它的 systemd。
Systemd 請參考官方的安裝教學，照著做就行了，比較容易踩雷的是取得憑證的部份，首先 Let&amp;rsquo;s Encrypt 會對你做 DNS challenge，所以如果是使用 CloudFlare 的，要把 Proxy 關掉（雲朵）。再來是寫設定檔，Caddy 的設定檔相當簡單，不過用 systemd 就是很難除錯（看 log 麻煩），所以建議先自己用 sudo caddy -conf /etc/caddy/Caddy 測試設定檔，等到沒問題再用 systemd 開。
設定檔範例 以下是我網站使用的設定檔
matomo.wancat.cc { root /var/www/matomo gzip fastcgi / /var/run/php/php7.3-fpm.sock php { index index.php } } lincalvino.me/narcissism { root /var/www/narcissism } lincalvino.</description>
    </item>
    
    <item>
      <title>CloudFlare 設定 DDNS 教學</title>
      <link>https://wancat.cc/post/cloudflare-ddns/</link>
      <pubDate>Tue, 04 Feb 2020 10:35:52 +0800</pubDate>
      
      <guid>https://wancat.cc/post/cloudflare-ddns/</guid>
      <description>最近剛入手一個 Raspberry Pi，用來作為一個省電的伺服器，本來困擾自己家裡的固定 IP 已經給了其他台伺服器，但找到方法用 CloudFlare 實現 DDNS。
CloudFlare DDNS CloudFlare 本身沒有官方的 DDNS 支援，但可以用 CloudFlare API 實做，我找了一個別人做好的 CloudFlare-ddns，折騰一會兒就設定好了。
首先安裝 cloudflare-ddns 和其依賴，然後以我要設定 pi.wancat.cc 為例，建立 site_pi.yaml 設定檔，填入以下內容：
%YAML 1.2 # CloudFlare DDNS updater script config. --- # CloudFlare API key # You can find this under Account &amp;gt; My account after logging into CloudFlare. cf_key: &#39;your key&#39; # Email address for your CloudFlare account. cf_email: &#39;your email&#39; # Domain you&#39;re using CloudFlare to manage.</description>
    </item>
    
    <item>
      <title>Google Analytics 替代方案 Matomo 安裝教學</title>
      <link>https://wancat.cc/post/matomo-installation/</link>
      <pubDate>Tue, 04 Feb 2020 10:27:38 +0800</pubDate>
      
      <guid>https://wancat.cc/post/matomo-installation/</guid>
      <description>因為實在不想再讓 Google 拿到資料了，所以我到 No More Google 網站上找 Google Analytics 的替代方案，第一名就是 Matomo。
Matomo 是一個自架的流量分析程式，是自由軟體，也有提供付費的 Cloud hosting 服務。我在試用後覺得還不錯，就決定自行在 Raspberry Pi 上安裝。因為是自架的，所以資料都在自己手上，不會被 Google 拿去利用。
安裝方式參考官方文件。
環境需要 PHP、MySQL or MariaDB
PHP 安裝：
sudo apt-get install php7.0 php7.0-curl php7.0-gd php7.0-cli mysql-server php7.0-mysql php-xml php7.0-mbstring 資料庫我比較偏好社群維護的 MariaDB：
sudo apt install mariadb-server sudo mysql_secure_installation 建議在執行 mysql_secure_installation 來強化安全性。
由於我使用 Caddy，所以 Caddyfile 中要加入以下程式：
matomo.wancat.cc { root /var/www/matomo # 換成你的 matomo 位置 gzip fastcgi / /var/run/php/php7.3-fpm.sock php { index index.php } } 然後打開網頁，就可以看到安裝程式了。接著要幫 Matomo 設定好 SQL User 和 Database，</description>
    </item>
    
    <item>
      <title>Hugo 安裝 LikeCoin 教學</title>
      <link>https://wancat.cc/post/hugo-install-likecoin/</link>
      <pubDate>Mon, 03 Feb 2020 18:50:39 +0800</pubDate>
      
      <guid>https://wancat.cc/post/hugo-install-likecoin/</guid>
      <description>取代 Hexo 我使用 Hexo 作為靜態網站生成器已經一年半，然而它有些我越來越難忍受的缺點，加上認識了由 Go 寫成的 Hugo，我在使用 Hugo 建立了幾個網站作為練習後，決定將自己的部落格改到 Hugo。
Hexo 仍然是一套很棒的工具，我主要是覺得它每次執行都要等大約十秒的時間，讓我很不耐煩；另外它的 server 功能有些缺陷，有時候改變內容會讓它變成 Untitled Post，不過我也沒有很認真的想要解決就是了。
Hugo 是 Go 寫的工具，所以是編譯好的，效能很高，server 功能也很棒，content 的管理更有彈性，整個網站也有更高的配置空間，但使用難度較高，每個 theme 的差異度很大，必須依據使用的 theme 去調整。
我覺得對新手來說 Hexo 是比較好的選擇，一開始就有預設 theme，整個架構也比較固定，內建的 deploy 指令能支援大部分平台，但如果想要有更高的自訂化，我覺得 Hugo 比較合適。
Theme 這次我選了 CleanWhite 這套主題，功能強大，設計的很好，非常感謝作者 Huabing Zhao。因為 Hexo 跟 Hugo 都是使用 Markdown 作為文章格式，連標頭格式都差不多，所以基本上是無痛轉移，只有圖片的部份需要重新插入，因為 Hexo 的「資產資料夾」是使用其特殊語法，所以轉移後需要自己手動改成標準的格式。
插入 LikeCoin Hugo 可以使用自訂 Layout 的方式，在不改變主題的情況下改變網站設計，我透過這個方式在每個文章下放了 LikeButton。
我們先 overwrite 文章的模板，將 theme 的 layouts 資料夾複製到專案目錄下。
cp -r theme/YOUR_THEME/layouts/ . Hugo 中的 Partial 功能，可以讓你建立小模板，嵌入在頁面中。參考文件。在 layouts 的 partials 資料夾建立 likecoin.</description>
    </item>
    
    <item>
      <title>翻轉教育的錯誤姿勢</title>
      <link>https://wancat.cc/post/wrong-flipped-edu/</link>
      <pubDate>Mon, 06 Jan 2020 12:36:14 +0000</pubDate>
      
      <guid>https://wancat.cc/post/wrong-flipped-edu/</guid>
      <description>什麼是翻轉教育 翻轉教育，是一種新型態的課堂教育方法，於 2007 年起源於美國，在 2013 以台大葉丙成教授為首，開始在台灣推動，其核心思想就是將「授課」與「練習」的時段翻轉。
傳統教育方式是課堂中上課、回家做練習，然而這樣的方式有兩個缺點：第一，每個學生程度不一，老師難以掌握合適速度；第二，學生回家做練習如果遇到問題，沒辦法即時與老師討論，只能自己找同儕或是仰賴補習班。
翻轉教育的作法，則是讓學生在家學習、在學校做練習。老師需要先將教學內容錄製成影片或其他形式，讓學生在家自行學習，在課堂上則是做練習，這樣老師就能即時掌握同學的學習狀況，並給予引導及幫助，同時作業因為是在課堂做，完成率也會提昇。
在台灣有名的例子，就像是葉丙成教授的機率課、均一教育平台等。
翻轉教育的錯誤姿勢 翻轉教育的常見誤解，是將其視為「讓學生當老師」，這樣的誤解可能是來自「翻轉老師與學生的角色」，翻轉教育是讓學習主動權從老師轉移到學生，但不代表要讓學生變成老師，更不代表換學生上來教課。
身為學生，我常常看到有老師打著「翻轉教育」的名號，但卻是叫學生分組，第一組上第一課、第二組上第二課，而老師就在教室後面偶爾糾正同學，結束後評論一下就好。這個完全不是翻轉教育，我在台灣吧教育論壇上有幸能親身訪問到葉丙成教授，他對此表示：
 「這樣的老師只是在打混而已」
 老師之所以為老師，是因為有著高出學生許多的能力，可以帶給學生成長。將教學的責任丟給學生並不是教育，除非是在上教育學程。
再者，這樣的形式通常會更無聊，我們以國文課舉例，國文這個科目所需要的素養，必須長時間的閱讀、思考來累積，難以在一個學期之內達成，要讓學生準備一個需要大量素養的國文課，完全是強人所難。
根據我自己的經驗，學生所準備的課程往往流於表淺，只能上字音字形、成語、翻譯等講義上的內容。我們想要改變過去的填鴨課程，學生卻自己準備出更填鴨的課程。一個好的國文老師，應當能教出遠超出課本範疇的深度內容，分析文本背後的背景脈絡，引起同學對作品的多元思考，這才是國文課應有的價值。
翻轉教育並非萬靈丹 我支持翻轉教育，但我認為翻轉教育並不是解決所有教育問題的萬靈丹，它在某些情況下可以帶來良好的效果，但有時候則否，甚至常常被誤用，導致現在的學生往往聽到翻轉教育就恐懼。
我認為翻轉教育適合的應用場景，應該是需要學生大量練習的科目，以及能客觀檢驗對錯的科目。例如數學、科學、程式，這些科目學生之間往往有明顯的程度差異，透過翻轉教育，可以讓優秀的學生盡情發揮，落後的學生得到老師的協助。
由於翻轉教育的「學習」階段，是學生獨力完成的，因此如果課程內容能夠明確分辨對錯，學生比較容易檢驗自己的理解是否正確。
如果是人文素養類型的課程，則不適合翻轉教育，想要做出「充滿思辨的課程」，比起用影片方式錄製，不如課堂上師生的即時交流來得更加有效。想像一下《正義，一場思辨之旅》的作者是一個人錄製上課影片，就知道效果差異之大。這類課程的目標是訓練批判思考能力、對於人與社會的認知，這是單方面的看影片難以獲得的。
你當然會說有一些國文課很無聊、社會課很無聊，但這並非教學形式的問題，而是老師自身的能力不足，以及體制太過依賴分數來衡量學習成果造成的。當然台灣學生課堂參與度很低也是事實，但這個必須從更小的時候開始改變，不在今天的討論方向。
因此在文末，我給出一個是否應該採用翻轉教育的判斷依據：
 如果是課程難度高，學生程度不一，並且需要練習的科目，那翻轉教育可以幫助你 如果問題在於課程無法引起學生的興趣，學生不願意參與討論，那這必須從教學內容與評量標準開始改變  這邊稍微提一下「報告」，我不反對透過學生報告來增加學習評量標準，但必須注意在課程中佔的比重，不該讓學生感到「還沒學到什麼就得做報告」。還需要注意主題和時間長短是否合適，老師也應當在學生遇到問題時提供協助，而不是放生學生自己處理。
結語 做了十幾年的學生，我看過許多老師滿腔熱血，努力嘗試新的教育形式，然而成效卻適得其反。我很感激老師們願意為了更好的學習而努力去改變、去嘗試，因此今天這篇文章並不是要批評你們，而是想從學生的角度，讓老師們了解，什麼才是對學生更好的方式。</description>
    </item>
    
    <item>
      <title>Frozen 2 安全觀影指南</title>
      <link>https://wancat.cc/post/frozen-2-safe-watching-guide/</link>
      <pubDate>Sun, 22 Dec 2019 14:34:42 +0000</pubDate>
      
      <guid>https://wancat.cc/post/frozen-2-safe-watching-guide/</guid>
      <description>近來 Frozen 2 上映，然而卻傳出許多人受困在 Frozen 世界中的不幸消息，最長的已經失聯長達數週，人身安全有極高的危險。
為什麼 Frozen 能造成這麼大的危險？專家推測，有可能是精緻的動畫和引人入勝的音樂讓人在無意間陷入了 Frozen 世界中，卻無法在電影結束後抽離，稱為 Frozen 症候群。根據估計，Frozen 症候群已經造成不亞於 SAO 的嚴重危機，世界衛生組織也將其列為 2019 年最嚴重的傳染病之一。
如何避免受困 首先，如果可以不看就不要看，假如非看不可，那千萬要做好以下準備，才能提高你存活的機率。
一、不要聽原聲帶。 千萬別小看音樂的力量，也許你在看完電影後以為自己已經平安脫困，但其實危險才正要開始。只要你聽了電影的原聲帶，你的受困風險就會大大增加，哪怕只是一首歌，只要聽到後，身體將會逐漸被冰魔法滲透，讓你不能自己。
到了最後，你將會不斷用 Spotify 聽原聲帶，直到你每首都會唱，甚至收集第一集第二集還有外傳的所有歌，做出一個危險播放清單然後循環播放。此播放清單將會公佈在文章的最後。
二、不要看影評 你以為迪士尼是給小孩子看的嗎？在你看影評前或許是這樣沒錯。千萬別輕易看影評，你將會發現埋藏在 Frozen 中的深刻含意。不看還好，看了不得了，你可能就會從此對它改觀。原本已經安全的逃出了，卻反而陷的更深。
文章的最後我將公佈幾個危險的影評，不要輕易點擊，否則風險自負。
三、不要重看第一集 千萬不要重看第一集。也許你早就看過了第一集，但在你看完第二集後，第一集的殺傷力又會有加乘作用。許多人儘管通過了上面的兩道關卡，然而在重看了第一集後，就失去了抵抗力，只能眼睜睜看著自己被冰凍。
同樣的，Frozen 的兩個短片 Frozen Fever 和 Olaf&amp;rsquo;s Frozen Adventure 也都是危險的影片，雖然影片不長，但歌同樣好聽，角色同樣可愛，所以假如你已經出現了 Frozen 症候群，這兩部短片將會加重你的病情。
高風險族群 以下列出幾個 Frozen 症候群的高風險族群，如果你在以下族群之中，你對 Frozen 將會有較弱的抵抗力，請斟酌是否要前往觀影：
姐妹控、百合控 不要懷疑，男主角 Kristoff 完全就是煙霧彈，兩位女主角 Elsa 和 Anna 才是真愛！尤其是第二集，沒有了第一集的枷鎖，Elsa 和 Anna 每場戲都是全糖去冰！真香、真香。這百合毒性很強，在做好防護措施前，千萬別輕易嘗試。
畫面控 如果你對於精緻的畫面情有獨鍾，那 Frozen 2 將會對你非常危險，這次的動畫品質跟六年前的 Frozen 已經不可相提並論，不論在場景、服裝、人物表情都變得更加栩栩如生，看了真的非常享受…不，是危險！小心不要被視覺所迷惑了！
尤其 Frozen 2 擺脫了過去「公主總是穿裙子」的設定，以角色的實際需求出發，設計好看又實用的褲裝。隨著動畫技術的進步，衣服的材質做得更加真實，衣服上的每個細節都看得出細膩的設計。</description>
    </item>
    
    <item>
      <title>CTF 參加初體驗</title>
      <link>https://wancat.cc/post/first-ctf/</link>
      <pubDate>Sat, 16 Nov 2019 10:00:00 +0000</pubDate>
      
      <guid>https://wancat.cc/post/first-ctf/</guid>
      <description>CTF 參加初體驗 承蒙朋友邀請，我人生首度參加資訊安全競賽——政府舉辦的資安金盾獎，本來就預期會很難，但沒想到會這麼難，深深感受到有一個世界等著去探索。
在報名時有個小插曲，本人就讀五專，現在是高一的年紀，然而我的學校在報名網被歸類在大專組，這樣我就無法和其他高中的友人 TNPLR 一同參加。為此我寫信去跟主辦單位反應，主班單位就添加了五專部的選項，實在令人感動，可見主辦單位的誠意。
初賽 設備 初賽的設備我覺得挺神奇的，首先不能帶自己的電腦、儲存裝置，手機不能用，主辦單位提供的是一台 Windows 電腦，並且要「連到虛擬機」作答，然而虛擬機還是 Windows，我不懂為何不用實體機就好了？
作答過程不能連上外網，也就是說沒辦法查資料，我本來就夠弱了，沒辦法搜尋就更弱了。只能用 Windows 電腦也是個很大的障礙，工具很不足，Base64 這種基本工具都沒有&amp;hellip; 沒網路又不能用線上工具。我在此建議大會，既然使用了虛擬機，就提供 Linux 這個選項，不然對於長年不使用專有作業系統的人來說實在不友善。
題目 雖然只是初賽，但每題都很難，我們在 Crypto、Web 和 Misc 都稍有斬獲，但最終都沒有解出來，全部輸掉。但很神奇的是，在兩週之後，我們竟然收到了決賽通知書，還是從 98 中剩餘的 15 隊。我們推測之後認為應該是題目有錯，導致當天顯示錯誤，但其實有答對，否則不可能隨便挑 15 隊進入決賽。
無論真相為何，既然進入了決賽，就要好好比。
決賽 決賽場地位於張榮發基金會，決賽比五個小時，國高中組有十題題目，題目分數為 100 三題、200 四題、300 三題。試題範圍跟初賽一樣，但沒有特別標注哪題是哪種類型，以下將根據我的觀察進行分類。
設備 決賽使用個人的電腦，並且可以上外網，這樣真的好很多，不需要用彆扭的 Windows，我也先裝好資安方面的 Linux 虛擬機——Kali，但還沒熟悉其中的工具，所以其實沒有很大的幫助。
雖然可以上外網，但比賽禁止與「外部通訊」，意思是不能和隊員以外的人類溝通，我覺得這個用字要再精確一點，因為瀏覽網頁其實也是一種「與外部通訊」，避免造成選手誤會。
 既然是比資安比賽，當然就要破解漏洞，在比賽後我想到了一種安全的通訊方式。假設有兩個隊伍 A 和 B，A 事先在賽前跟 B 約好一個通訊埠和一組帳密，比賽開始後，A 在他的電腦架設一個 SSH Server，並使用事前約定好的埠口，然後 B 就用 nmap 掃描區網所有電腦，掃到事前約定好的埠口就代表該主機是 A 隊，然後就可以用約定好的帳密登入進去了。
這個作法有多種安全性，首先，這個過程完全就是操作終端機，看起來跟平常解 CTF 並無二異。第二，因為使用 SSH，所以通訊過程是加密的，主辦單位也不知道。那有了這個通訊方法後，就可以透過把 flag 留在伺服器中的某個檔案的方式來交換答案。
但有個大漏洞是：主辦單位可以發現兩個不同隊伍的 IP 有通訊的行為，雖然不知道通訊內容為何，但還是有可能會因此被舉發，所以好孩子還是不要嘗試喔！</description>
    </item>
    
    <item>
      <title>JSP 第九屆參加心得</title>
      <link>https://wancat.cc/post/jsp-9/</link>
      <pubDate>Tue, 20 Aug 2019 10:38:52 +0000</pubDate>
      
      <guid>https://wancat.cc/post/jsp-9/</guid>
      <description>JSP——國中科學探究聯合發表會——是一個給學生的派對，讓愛好科學的學生聚在一起互相交流，從 2017 年 JSP７時開始，我已經參加了三屆的 JSP，每次參加，心態都有些不同；每次參加，也都領悟到不一樣的事。
今年，我已經國中畢業了，抱持著「參加最後一次」的心情來到 JSP，卻發現自己跟過去不一樣了。
專題演講 自從二年級的科展比完之後，我就沒有再做過科學研究，可以說是有些倦了，這三年來參加 JSP 的作品也都不是比賽作品，而是為了 JSP 而準備的內容。
為什麼講區塊鏈？ 我大約一年前從 台灣吧的芬特克 系列中第一次認識了區塊鏈，後續我加入了 Matters 社群、LikeCoin 讚賞公民，逐漸對區塊鏈有越來越深的興趣，後來透過閱讀區塊鏈媒體 區塊勢 了解許多的區塊鏈應用相關的知識。
JSP 大部分還是以傳統學術的科學為主，在資訊科學的部份，通常只是「工具」，而不是研究主軸。而我 去年的演講 就已經開始以「資訊科普」為主題，像大家介紹透過 Python 來寫一個遊戲，和遊戲中物理系統設計的基本概念。
我其實並不是多會寫程式的人，這一年來也沒完成什麼值得驕傲的專案，所以我想區塊鏈應該是 JSP 的學員比較陌生的主題，「科普區塊鏈」應該會蠻不錯的。而相對於加密貨幣，我自己更喜歡區塊鏈在「非貨幣上的應用」，於是決定來講「數位資產」這個主題。
演講的準備 我認識一些在區塊鏈領域的前輩，根據前輩的經驗，要早點給聽眾「一點區塊鏈上的東西」比較能提起聽眾的興趣，所以通常會發一點幣或是數位資產。但慢慢發給一位一位聽眾想必會花很多時間，於是我就決定來設計一套「發禮物系統」，只要將資產建立好，然後產生一個限時限量連結，點入連結貼上自己錢包地址就可以取得數位資產。
說實在的，這不是多困難的系統，產權區塊鏈 Bitmark 有給開發者使用的 SDK，所以不需要自己處理底層，甚至連 API Request 都不用發。但我畢竟還是個菜鳥工程師，整個系統開發下來仍花了一個多禮拜，直到演講的前兩天才開發完畢。
Bitmark 很高興有開發者願意加入他們的生態系，所以聽到我在開發這個系統時，就送了我一件 Bitmark 的 T-Shirt（就是我當天穿的），也免費給了我活動三天的 Token。
但相對於花了很多時間準備程式，我在演講本身的準備相對較少，以前準備演講都會先寫好逐字稿，然後大量的練習，但這實在是太耗費心力，所以從這次演講開始，我決定要練習只準備投影片就能講完整的能力。
演講 就結果來說，我認為這次演講並不成功，我事後訪問了一些聽眾，表示聽懂的並不多，數位資產我總共準備了 120 份，最後卻只發出了 16 份。
原因有幾項：原本約定好的時間是 25 分鐘，然而到了當天我才知道只有 10 分鐘，很多內容都來不及說，數位資產也變成是吃午餐的時候發，觀眾參與度就變得很低；而且接收數位資產需要安裝 Bitmark app，現代人不喜歡得裝 app 的事情，而且畢竟課程沒有要求，不是大家都有帶著手機，也有些人根本懶得安裝。
區塊鏈本身就是個很難在幾個小時內說完的主題，何況我只有十分鐘，我只能帶個聽眾最粗淺的印象並帶入一些實際的應用。
因為我沒有準備演講稿，只有大綱跟投影片，可以加速在 10 分鐘說完，但就沒什麼問答時間，其實有不少觀眾有提問題，但卻沒時間回答，這是我覺得很可惜的。
我這次演講有準備 sli.do，因為我知道很多聽眾很害羞不太敢發問，不過因為大家並不都有手機，也不一定有網路，但還是有一位觀眾留下問題（還有我自己先準備的假問題），所以我覺得未來還是可用。
我希望未來 JSP 能夠增加每個發表的時間，錯失珍貴的討論機會，真的很可惜。</description>
    </item>
    
    <item>
      <title>ORM 入門：如何區分 ORM 中的關聯</title>
      <link>https://wancat.cc/post/orm/</link>
      <pubDate>Fri, 26 Jul 2019 10:49:46 +0000</pubDate>
      
      <guid>https://wancat.cc/post/orm/</guid>
      <description>最近初次接觸 ORM——Object-relational mapping——這個強大的工具，但是為其中的關聯而苦惱不已。在仔細研究後終於了解其差異，本篇文章透過一個圖書館專案的實例，使用 Golang + GORM 來實做，並輔以 SQL 做說明，讓已經學會 SQL 而想要了解 ORM 的人真的「懂」如何設計 Relation。
什麼時候會用到 Relation？ ORM 中的 Relation 就是相當於 SQL 中的各種 Join，用來將不同表格中的資料串起。由於 ORM 是用物件，所以如果未來有關聯到其他表格的需求，必須在物件設計時就包含進來。
來定義需求吧！我們今天假設情境是要定義一個圖書館的資料庫，那我們會有編目資料 Book（書的資料）、館藏資料 Item（書的實體），作者資料 Author，出版社資料 Publisher。書名、ISBN 等等跟關聯沒有關係的就不放入。
我們先不要討論 gorm 要怎麼寫，先把要取得的資料擺出來。
type Book struct { Items []Item Authors []Author Publisher Publisher } type Item struct { Book Book } type Author struct { Works []Book } type Publisher struct { Publication []Book } 我們要讓所有的 structure 都能夠參考到依賴自己的對象：作者必須參考到作品集、出版社要能參考出版品、分類要能找出其中的所有書籍。
接下來我們一個一個釐清物件之間的關聯關係，來設計 ORM 吧！</description>
    </item>
    
    <item>
      <title>如何在 Linux 使用 Caps Lock 切換輸入法</title>
      <link>https://wancat.cc/post/capslock/</link>
      <pubDate>Sat, 06 Jul 2019 20:12:00 +0000</pubDate>
      
      <guid>https://wancat.cc/post/capslock/</guid>
      <description>Caps Lock 是一個我們很少用的鍵，偏偏它擺在鍵盤的黃金位置，實在是大大的浪費，在 Mac 上可以使用 Caps Lock 來作為中英切換鍵，我認為是很好的設計，以下教學將介紹如何用指令列來設定 Fcitx 使用 Caps Lock 來切換輸入法。
事實上 Fcitx 可以使用任何鍵作為輸入法切換鍵，然而因為 Caps Lock 有著切換大小寫的功能，如果不將此功能關閉，輸入法會發生異常——中文切到英文後變成大寫，因此我們要利用 xmodmap 工具來將 Caps_Lock 鍵指向到不會使用到的 Multi_key，再將 Fcitx 切換鍵對應到 Multi_key。
我們先查詢一下 Caps_Lock 對應到的 keycode 是多少。
$ xmodmap -pke | grep Caps_Lock keycode 66 = Caps_Lock NoSymbol Caps_Lock 可以看到鍵盤上的 Caps_Lock 對應到的是 66 這個 keycode，那我們接下來就是要將 66 改成對應到 Multi_key。
$ xmodmap -pke &amp;gt; ~/.Xmodmap	#將設定存為檔案 $ vim ~/.Xmodmap # 將 keycode 66 處改為 keycode 66 = Multi_key NoSymbol Multi_key # 在最底下加入 clear lock $ xmodmap ~/.</description>
    </item>
    
    <item>
      <title>我認為，近視應該戴放大鏡</title>
      <link>https://wancat.cc/post/myopia-should-take-magnifier/</link>
      <pubDate>Fri, 07 Jun 2019 19:25:23 +0000</pubDate>
      
      <guid>https://wancat.cc/post/myopia-should-take-magnifier/</guid>
      <description>警告！這篇文章是由一個國中生撰寫，只依據國中光學的知識，請帶著批判與謹慎的心態來看待這篇文章。
本篇文章最大的目的是促進討論，激發新的想法，因此歡迎有不同看法的朋友在下方留言與我討論，我也可能會根據討論的內容修正文章內容與看法。但請你在發表評論之前，先仔細的看過本文，了解對方的論述比較能帶來有效率的討論。
 先備知識 眼睛原理 我們的眼睛的主要結構，是一個凸透鏡（水晶體）與感光元件（視網膜），透過凸透鏡成像的原理，將遠處的光線成像在視網膜上，讓我們看到影像。
不同遠近的物體，需要不同的焦距才能看得清楚，在視網膜不動的情況下，就只能改變水晶體的凹凸程度，稱為曲率。水晶體曲率大，光線折射的角度越大，就能看越近的影像，反之折射角度小，則能看清楚遠處的影像。
控制水晶體的肌肉就是我們常聽到的睫狀肌，睫狀肌收縮（用力）就可讓水晶體變凸，看清近處的影像；睫狀肌放鬆，就可以讓水晶體變平，看清遠處的影像。
近視原理 所謂近視，就是睫狀肌出了問題，長時間看近物，讓睫狀肌必須長時間用力，導致睫狀肌痙攣而無法放鬆。睫狀肌無法收縮就會導致遠處的物體看不清楚，也就形成我們一般所說的「假性近視」。
假性近視還有機會治療，然而當時間一久，眼球就會開始變「凸」，水晶體和視網膜的距離拉遠，這就是無法治療的「真近視」。
我個人沒有科學根據的想法是：近視是一種「生物的用進廢退」現象，當我們在小時候長時間看近物，身體會認為該個體這輩子大概就是要看近物了，於是透過拉長眼睛來「優化看近物的能力」，越近的物體會成像在越後方，拉長眼睛可以比較輕鬆的看清楚近物，讓水晶體不用維持在很高的凸度，睫狀肌就可以不用保持在緊繃狀態。
眼鏡原理 近視眼鏡 眼鏡的意義，就是透過凹、凸透鏡，來改變光線折射的路徑。先講凹透鏡，也就是我們現在的近視眼鏡，我使用最簡單、可能不完全正確的方式來比喻鏡片與眼睛的關係：
 如果我們定義平的玻璃片（平透鏡）的凹凸程度（簡稱凸度）是 0，凸透鏡為正，則凹透鏡就是負。（這裡不使用曲率一詞，是因為曲率有其正確的定義與計算方式，較為複雜故使用簡化的「凸度」表達，科學上並沒有凸度一詞）。
水晶體一定是個凸透鏡，我們假設看清楚一百公尺遠的物體凸度要為 5，看清楚 10 公分的物體凸度為 15。當今天一個人看 10 公分的距離太久，導致睫狀肌痙攣，水晶體凸度維持在 15 無法放鬆，則此人就不能看清楚一百公尺遠的物體。
那假設有一個凸度 -10 的鏡片，則凸度 15 的水晶體加上凸度 -10 的鏡片，就可讓總凸度變成 5，就可以看清楚一百公尺遠的物體了。
 以上當然是非常簡化的說法，可能也不能完全用加法來做運算，但概念是類似的。近視眼鏡的功能，是讓凸度太高的眼睛降低總凸度，以讓無法放鬆的眼睛還是能看清楚遠處的物體，注意，近視眼鏡不能讓你的睫狀肌放鬆，它僅是讓你能看清楚而已。
有什麼差別呢？請看我們下個例子：
 今天你已經近視，眼睛本身的凸度為 15，你戴著凸度 -10 的眼鏡，然而現在如果你要再看 10 公分距離的物體，眼睛的凸度會如何變化呢？
10 公分的物體需要總凸度為 15，因此眼睛的凸度須增加到 25，搭配凸度 -10 的眼鏡才能看清楚 10 公分的物體。
戴著近視眼鏡，反而讓睫狀肌需要更加用力。
 因為眼鏡不會依照你所看著的物體而改變凸度，因此近視眼鏡可以總歸為一句話：讓東西變近。它讓遠處物體變近讓你能看清楚，但也讓近處物體變得更近，以至於你必須更加用力才能看清楚，而這樣將會更加傷害你的視力。
遠視眼鏡 遠視眼鏡是凸透鏡，可以增加凸度，讓我們更輕鬆的看清楚近的物體。以下為例子：
 今天一個人沒有近視，他戴著一個凸度為 +10 的遠視眼鏡，要看一個 10 公分的物體。看清楚 10 公分近的物體需要總凸度為 15，所以他的水晶體只要凸度 5，搭配凸度 10 的遠視眼鏡，就可以看清楚物體了。</description>
    </item>
    
    <item>
      <title>寫給會考後的我們：別再讓下一代經歷這些</title>
      <link>https://wancat.cc/post/after-the-exam/</link>
      <pubDate>Sun, 19 May 2019 20:21:44 +0000</pubDate>
      
      <guid>https://wancat.cc/post/after-the-exam/</guid>
      <description>「而我們呢？在會考之後，你就要忘記國中這三年的痛苦，『只帶走美好的回憶』嗎？在面對學弟學妹的痛苦時，只會說『我們以前比你們更慘』而已嗎？在成為既得利益者後，就反過頭來維護這個體制嗎？」
「同學們，我希望我們不要成為這樣的大人。」
 會考，國中三年的最大目標，終於在今天結束了。大家也即將分發到不同的學校，國中，變成了回憶。
但，我希望你不要忘記，自己這三年是怎麼過的。
我們的今天 我對國中的印象，就是考試和第八節。沒有「早自修」，只有考試。記得在我國小的一段時間，我早修會拿班上一本有關數學的書，坐在位子，邊看邊吃早餐，那是一段很美好的時光，真正的早自修，就應該如此美好。
每次段考前兩個禮拜，我會開始認真準備，段考前衝刺期是很煎熬的時光，每天在學校都是面對成千上萬的考卷，我是好學生，每一張都認真寫，可是越寫越懷疑 ——
 「我來學校就是為了這些嗎？」
 漸漸的，我們都變成了可悲台灣小孩，只在乎考試，不在乎學習的樂趣；只關心分數，不關心實際的運用；只了解作法，不了解背後的原因。
許多人去補習，將已經少得可憐的課餘時間再度榨的一滴不剩，這樣零碎而疲憊的課餘時間，除了打電動，還會想做什麼？還能做什麼？
大人們總是說，他們以前也是這樣過的，他們以前更慘。那我試問，為什麼當你們成為大人後，沒有改變它？
大人的過去 三十年前，我爸在國中時就被送去私立住宿學校，接受著「非常不健康的打罵教育」。每天一早起來就進學校，放學後還要晚自習到九點，可說是零自由時間。
高中畢業，聯考成績不理想，重考，過了一年痛苦的補習班生活。
我相信，過去的大人們一定經歷了比我們更糟的生活，生活困苦，教材也更加的填鴨。但這些大人們，在長大後，為什麼還是擁護著這套考試制度、擁護著升學主義？為什麼你們還是將孩子送進了補習班、還是要求學校要有第八節？
因為你們都經歷過嗎？
為什麼，你們沒有讓我們更好？ 為什麼，當年受盡折磨的大人，在長大後，不願意改變這一切？
不要牽拖政治，政治反映出的就是選民的意志，有什麼樣的選民，就會有什麼樣的政治人物。當初十二年國教，出來反對的不也是由「受盡折磨的大人」組成的家長嗎？
我曾經在班聯會問教務主任，可不可以取消第八節，她說學校一點也不想辦第八節，是家長們要求的。
制度反應的，永遠都是掌權者的價值觀。過去歷經折磨的是你們，但現在掌權的也是有投票權的你們。
我不否定許多大人對教育改革的努力，我也知道三十年前到現在教育體制已經好了許多，不再規定頭髮、不再有教官、不再有三民主義，有即將上路的 108 課綱；但我們還有充滿考試的早修、上正課的第八節、過早的上學時間和過長的上課時數，我們可以更好嗎？ 可以讓受了十二年國教的我們，不要變成 可悲台灣小孩 嗎？
我相信，所有的改革，都要從理念層面開始，只有當我們開始重新思考考試制度、升學主義，制度才有可能改變。
三十年前的大人們，或許在威權的時代裡，不被允許質疑體制，我並不責怪。
 而我們呢？
 不要成為，那個「我們也是這樣過」的大人 而我們呢？在會考之後，你就要忘記國中這三年的痛苦，「只帶走美好的回憶」嗎？在面對學弟學妹的痛苦時，只會說「我們以前比你們更慘」而已嗎？在成為既得利益者後，就反過頭來維護這個體制嗎？
同學們，我希望我們不要成為這樣的大人。
體制可以限制你的行為，但可別讓它限制你的思想。
我希望，當我們有能力、有權力、有影響力時，用你的話語、用你的行動、用你的臉書 IG 貼文、用你的選票，去表達對這個體制的不滿，去嘗試改變這一切，去做跟上一代不一樣的事。
我希望，我們在面對下一代時，不要用一種「過來人的傲慢」，來打壓對體制的質疑。
我希望，當我們為人父母時，可以想想自己在學生時是什麼感受，不要拚命將子女送進補習班，不要要求學校上第八節，不要對你的子女做過去你痛恨的事。
最有能量去改變的，往往是身處在體制中的人。我希望我們不要因為脫離了這個體制，就漸漸失去了這些能量。
 我希望，這些痛苦留在我們這一代就好。
 延伸閱讀 林寓森《別把孩子的時間填滿》
15 歲的生涯選擇—我為何拒讀高中
當老師對我們說：「可悲台灣小孩」</description>
    </item>
    
    <item>
      <title>SITCON 演講：軟體開發的未來，是大斗內時代？</title>
      <link>https://wancat.cc/post/the-programming-future-is-donate/</link>
      <pubDate>Mon, 25 Mar 2019 17:22:22 +0000</pubDate>
      
      <guid>https://wancat.cc/post/the-programming-future-is-donate/</guid>
      <description>2019 SITCON 演講：軟體開發的未來，是大斗內時代？ 前言 我參加了 2019 在中研院舉行的 SITCON 學生計算機年會，並投稿了一篇 Espresso 短講，以下是我的演講稿：
講者介紹 大家好，我是林宏信，現在是國中三年級。我從小六開始接觸 Scratch，國二開始學習 Python，目前正在學習 Go Web 開發。我的興趣是寫程式、寫音樂、寫文章，經營部落格 WANcatServer 網貓伺服器 ，歡迎大家去看看喔！。
今天要跟大家分享的是 我們如何靠軟體賺錢，相信在台下的大多數人，包括我，都喜歡寫程式，那你是否思考過，我們該如何靠軟體賺錢呢？畢竟這攸關生計，是個很重要的問題。
軟體難以賺錢 雖然軟體工程可說是現代社會最熱門的行業之一，但事實上「純靠軟體賺錢」是一件很難的事。當然，今天如果你受雇於公司，公司付薪水請你寫軟體，那沒什麼困難。但如果今天你要將手頭上的軟體換成錢，可不是那麼容易的事。
拷貝發大財 也許今天你寫了一個很好玩的遊戲，你想要賣給別人玩，你將它打包成 binary，找到買家，收了錢將軟體寄給他，但也許他就直接將你的軟體發布在網路上免費供人下載，你後面的生意都不用賺了。
憑什麼？根本原因在於軟體是一項「0 邊際成本」的產品。
邊際成本 邊際成本是經濟學的名詞，意思是 「增加一單位產品所需要的成本」，生產一台汽車的成本高昂，但生產第 10000 台汽車的成本就低的多。
軟體開發絕不是無本生意，從設計、開發到產品做出來都需要大量的時間、金錢、人力成本。0 邊際成本，一方面可以將產品賣給更多人，但另一方面所有拿到軟體的人都有「拷貝的能力」，隨時可以破壞你的生意。
不只是軟體，現在所有的創作媒介：文字、影片、音樂，幾乎都是 0 邊際成本的產品，各式各樣的創作也無法逃離「被拷貝」的命運。為了擋住這波拷貝攻勢，政府定了許多著作權法規、DRM 來規範。但事實上，Who cares? 大家還不是複製得很爽？
那該怎麼辦？與其讓心血被別人拿去散佈，不如 我們自己將它「免費」。
免費時代崛起 如果我們要完美結合軟體 0 邊際成本的特質，最有效方式就是「免費」，並另找方式獲利。明顯的例子就是廣告業的崛起。
消費者轉為生產者？ 記得我小時候剛開始用電腦，Windows 要錢，Office 也要錢，買遊戲也要錢，花錢好像理所當然。但當我開始上網後，發現 Google 是免費的、Facebook 是免費的、YouTube 也是免費的。我相信做 Facebook 絕不會比 Windows 簡單，那為什麼 Windows 要收錢，而 Facebook 不用呢？
原因在於使用者對公司的價值。
在網際網路尚未普及前，使用者與軟體公司就是單純的消費供給關係，使用者花了錢買到軟體就拍拍屁股走了，不會帶給軟體公司任何附加價值，所以軟體公司必須收費。（除了用 Word 檔征服全世界）
而當網際網路開始蓬勃發展後，事情就不同了。一個使用者對 Facebook 而言，是賺錢的工具！他不只能提供自身的資料，還能鼓勵周圍的親朋好友一起使用。因為使用者對 Facebook 有價值，所以採免費的商業模式來拉更多的使用者，是最有效率且最賺錢的方式。</description>
    </item>
    
    <item>
      <title>妳該使用密碼管理工具嗎？</title>
      <link>https://wancat.cc/post/should-you-use-password-manager/</link>
      <pubDate>Thu, 21 Feb 2019 20:07:35 +0000</pubDate>
      
      <guid>https://wancat.cc/post/should-you-use-password-manager/</guid>
      <description>現代人的密碼危機 如果妳是一位有正常使用網路的現代人，基本上在網路上會有許多的帳號。我算是用量比較高的用戶，我稍微統計了一下：光是記得的我就有 72 個帳號，還有很多早就忘掉的黑數呢！
過去，帳號被盜或許是件小事，當然如果 LOL 或玩遊戲的帳號被盜會很心痛，但不至於會影響生活。隨著現代我們將生活越來越多部份放入網路，網路身份的重要性已經足以影響生活，因此我們勢必要用一些方法好好管理自己的網路身份。
重複密碼 密碼的大原則就是不要重複，但哪有辦法呢？我們有那麼多的帳號，如果每個都要背一個密碼哪辦得到？每次在「Sign up」頁面停了很久，最後還是用了以前的密碼。
重複密碼的危險性在於：只要妳其中一個帳戶被破解，其他帳戶都會遭殃，尤其是一些安全性不高的小網站，或是居心不良的惡意網站，如果跟重要的帳號設了相同的密碼，那就危險了。
使用不安全工具紀錄 第二個危險的情形就是使用不安全的工具紀錄密碼，像是我以前也會用 Evernote 紀錄密碼，相信不只我，很多人都會用一些筆記本軟體來紀錄密碼，這非常危險！ 以下用 Evernote 舉例：一方面我們無法確定 Evernote 公司會不會讀妳的筆記，而且內容沒有經過加密，要是 Evernote 的伺服器被攻擊，資料外洩，妳的密碼就等於是明文獻給了駭客。何況妳怎麼知道 Evernote 不會授權某些極權政府讀妳的資料？（這裡就不點名了）
有些人認為將檔案存在本機，不要上傳到網路就安全了，但其實不然：在妳的手機上有非常多的應用程式都有權限存取妳的檔案，若是其中有惡意程式發現妳的密碼文件，大可直接上傳到它的網路資料庫。
因此紀錄密碼的工具以及儲存的資料必須要被加密，也就是要有所謂的主控密碼。
 密碼管理工具，安全嗎？ 許多人，包括我，一開始聽到「密碼管理工具」時，都會覺得不可思議：這種東西真的能信任嗎？但其實一個做得好的密碼管理工具，是很安全的，以下我將回應常見的疑慮。
我主密碼被破解了不就完了？ 有些人覺得，使用密碼管理工具，就是將所有密碼的命運寄放在一組密碼上，這樣風險太大了！
其實沒錯，如果妳今天能夠記得自己每個帳號的每個密碼，妳壓根不需要密碼管理工具，但問題是我們辦不到。
就是因為我們記不得密碼，我們才會用相同的密碼，才會有上述所說的安全問題。而事實上也沒錯，使用密碼管理工具就是將所有密碼寄放在一組密碼上。但我們可以透過兩步驟驗證來避免主密碼被破解就被盜用。
兩步驟驗證，顧名思義，就是在妳輸入密碼後還要經過另一道手續才可以登入。例如 簡訊驗證碼、Email 確認信都是常見的形式，這樣可以避免密碼被破解就導致帳號被盜，駭客必須同時掌握妳的密碼和手機才有辦法登入，這個難度實在蠻高的，所以現在幾乎所有研究都指出兩步驟驗證能確實提高安全性。
它會偷我的密碼嗎？ 另一個考量就是這個程式是否值得信任？，畢竟我在上面舉 Evernote 例子時也提到：我們很難確定程式有沒有在背後搞鬼！ 而這就見仁見智了，有些人可能是信任大公司的軟體，而我是信任良好的加密演算法和開源軟體。
 一個安全的加密演算法，就是妳就算知道它的原理還是無法破解它
 舉我所使用的 Bitwarden 為例，在官網 FAQ 就寫了 為什麼妳要信任 Bitwarden。
   Bitwarden is 100% open source software. All of our source code is hosted on GitHub and is free for anyone to review.</description>
    </item>
    
    <item>
      <title>網站建置紀錄</title>
      <link>https://wancat.cc/post/my-website-building-log/</link>
      <pubDate>Sun, 20 Jan 2019 13:15:09 +0000</pubDate>
      
      <guid>https://wancat.cc/post/my-website-building-log/</guid>
      <description>網站建置紀錄 我的網站從 2017 年六月第一次上 GitHub Page，到現在 www.wancat.cc ，也已經半年了，寫下這篇文章紀錄一下架站的方法。
Hexo 我的部落格是用 Hexo 將 Markdown 轉成一個靜態網站的，所以可以部屬到 GitHub Page 或是任何伺服器，我自己現在還留著 https://wancatserver.github.io 避免哪天伺服器發生不測&amp;hellip;&amp;hellip;。那 Hexo 可以多重部屬，我的設定檔大概長這樣。
# _config.yml deploy: - type: git repo: git@github.com:WANcatServer/WANcatServer.github.io.git - type: rsync host: 我的伺服器 ip user: lancat root: /volume2/WANcatServer/www 那我的佈景是使用 Archer，非常好看的一個佈景，那我有做一些小調整：把簡體中文換成繁體，然後將授權地方放上 CC 授權。
cd path/to/blog vim /theme/archer/layout/post.ejs 即可修改模板內容，EJS 也是我之前用過的模板引擎，所以挺快就弄好了。
到 創用 CC 官網 上找你要的授權，就可以複製 HTML 嵌入到網站裡了。可以直接加在 Archer 裡面的 _config.yml
# theme/archer/_config.yml # 將 license 改成以下 license: &amp;lt;a rel=&amp;#34;license&amp;#34; href=&amp;#34;http://creativecommons.org/licenses/by-sa/4.0/&amp;#34;&amp;gt;&amp;lt;img alt=&amp;#34;創用 CC 授權條款&amp;#34; style=&amp;#34;border-width:0&amp;#34; src=&amp;#34;https://i.</description>
    </item>
    
    <item>
      <title>理想王與潰爛王的一天</title>
      <link>https://wancat.cc/post/king-in-the-mud/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wancat.cc/post/king-in-the-mud/</guid>
      <description>理想王與潰爛王是出於鄭問漫畫—深邃美麗的亞細亞中的角色。
　理想王有著建立一個「理想國」的理想，畢生為此努力。他過著規律且高度自我要求的生活，但他不只要求自己，還連帶要求了周遭的所有人。他殺掉不符合理想世界的人，他甚至透過「理想錶」控制與洗腦人民；但他也願意為了理想放棄一切，在與完美王的對決中，當他知曉有能力比他更高的完美王，他願意由完美王來實踐理想，證明他所在乎的不是權力，而是理想。
　潰爛王有著高深莫測的能力，他有著高潔的思想，主張順應自然，不去做些什麼，只是成日「漂著」，像一灘爛泥般。潰爛王表面上無所事事的漂著，但其實在養精蓄銳，累積他的能量。
 理想王與潰爛王的一天 King in The Mud 早上五點，理想王關掉鬧鐘，起身，開始他計畫好的一天。
簡單梳洗後，理想王坐在電腦前，操作著 Linux 系統，開始工作。六點四十，理想王闔上電腦，準備去上學。
七點半，理想王拿出抽屜中的一本講義。他不喜歡學校，他不喜歡時間被他人安排，在面對內容不理想的課程時，他拿出講義，自顧自的寫著，因為他不想浪費回家後一絲一毫的時間來應付學校的作業。
下課時，理想王放下講義，拿著已經用了六年的直笛，走到教室一隅，吹著自己譜寫的旋律。吵雜的教室內，沒有人聽著，但理想王不在乎，因為他明瞭，總有一天會有屬於他的聽眾。
 五點，潰爛王放學了。
背著尚未完成的作業，漫步走出校園－書包較昨天沉了些，潰爛王步伐緩慢，彷彿在泥沼中漂浮，但比起他的步伐，他的內心更像一灘爛泥。潰爛王眼睛盯著不斷向後的腳下，眼神平靜，但內心在翻攪，企圖在這灘爛泥中，找尋一項非常重要的事物，但又隨即忘了是什麼，繼續望著腳下的地面，只在偶爾瞧見蟑螂屍體時，心才又產生了波動。
五點十五，潰爛王回到家，一股腦地倒在沙發上，他知道他該去做功課，但身體長了根，深深地箝入沙發裡，飢渴的想從沙發中汲取些什麼。「什麼？」，潰爛王不知道，他不餓，坐一整天並不消耗多少血糖；他不累，但大腦似乎比身體更加疲憊。
潰爛王打開書包，開始做功課，可是寫沒兩個字，潰爛王又開始在泥沼中翻找。「什麼？」，潰爛王心思紊亂，眼睛雖盯著題目，但一個字都讀不進去。「BDCBA」，潰爛王隨手猜完剩下的題目，便將作業扔到一邊。
 五點，鬧鐘響了。今天是段考，理想王昨天為了段考特別早睡，走到書桌，打算再做最後的複習，不過想想自己也沒什麼好讀的了，於是打開電腦，繼續工作。
七點二十，理想王到了學校。他討厭段考，因為段考會破壞他好幾天的工作時間，又會讓他精神變差。但理想王還是應付著，考前的週末仍然會多花時間讀書，縱然段考結果根本無關緊要，每次段考理想王還是認真地準備。
暑假時，理想王規定自己每天要看四小時的書，書桌上複習講義排一列，每本翻開都可以看到理想王的筆跡。暑假第一天，理想王老實的讀了四小時，四小時結束後，理想王有種虛脫的感覺，很累、非常累，他發覺自己唸書比在學校坐著要累多了，而當他唸完書後，也沒什麼精力工作了。當暑假過了一個禮拜後，理想王突然驚覺，自己這個禮拜似乎什麼也沒做，沒有學習到新的事物，沒有完成自己安排的工作。
他發覺，自己儘管花了那麼多時間寫複習講義，他的心智卻沒有一絲一毫的成長，反而變得更沒耐心、更加死板，開始只在乎題目，開始不重視真實。
打鐘了，學生們收拾書本，準備開始考試。理想王心思回到了學校，握著已經磨圓的 2B 鉛筆，準備好成為稱職的考試機器。
 收卷了。潰爛王放下手中的筆，手臂還隱隱作痛。想著剛才寫的作文，心裡感到很糟糕，他喜歡寫作，但 45 分鐘的限制，讓潰爛王總是寫出一篇又一篇的垃圾。稿紙太小，放不下他的思想，而那所有關於「青春」、「校園生活」的題目，都使他腦袋空白。
四點，段考提早放學，或該說是正常時間放學。潰爛王帶著成績單，徐徐走出校園，他冷眼看著熱鬧的球場、興奮討論的學生們。一點都高興不起來，潰爛王十分空虛，滑開手機，看著長長一串準備在段考後完成的工作，但他一點幹勁都沒有。眼光飄到行事曆，下次模擬考就在三週後，心又更沉了。潰爛王關上螢幕，低頭繼續走。
四點十五，回到家，潰爛王隨手將書包扔在一旁，便走向電腦。開了機，看著他的 Linux 系統，卻不知要幹嘛。打開遊戲，玩不到十分鐘又把它關掉了。潰爛王無聊極了，坐在沙發滑手機，想看些技術文章，卻又沒耐心讀完，於是一直存到 Pocket，稍後閱讀，儘管自己也知道未來不會讀。潰爛王突然感到眼睛酸痛，就放下手機，睡了。
 五點二十七，他關掉鬧鐘，看了手錶一驚，自己竟讓鬧鐘吵了半個小時。
躺在床上看著天花板，他竟不知該如何安排這一個半小時的時間，這早晨的黃金時段，讀書？寫程式？寫文章？他什麼也不想做，轉身把燈關掉，繼續睡。
七點二十，到了學校，他看著滿是教科書的抽屜，隨便抽了一本，但眼睛沒法好好對焦在題目上，心也是。早修的考卷發了下來，他對著考卷發呆，每當他試圖回想方才究竟在思索什麼，卻又忘的一乾二淨。記憶體塞滿了資料，又被刪個精光，什麼都沒留下；CPU 忙碌的在各個程序做切換，卻一個也做不好。
 七點十五，美好週末早晨。他看著段考前留下的 To Do List。「什麼都沒解決呢」，卡住的佇列，無數的 Zombie Process，和被無用資料佔滿的記憶體。
他再也無法忍受了。
他坐下，閉上眼睛，慢慢清空前景的程序。他不再翻攪了，心中那片爛泥，彷彿從沸騰的、冒泡的，逐漸安靜、冷卻下來，變成一片寂靜的泥沼。漸漸的，泥沼開始沉澱，水變得澄清。而在水中的，似乎就是他一直在找尋的那個「什麼」。
$ reboot
 他睜開眼睛，看著貓咪懶洋洋的，躺在週末早晨的和煦陽光下。
他知道答案了，他帶著水，走向書桌，繼續修築他的理想。</description>
    </item>
    
    <item>
      <title>我在技藝班所見所聞</title>
      <link>https://wancat.cc/post/vocational-courses/</link>
      <pubDate>Tue, 04 Dec 2018 20:22:23 +0000</pubDate>
      
      <guid>https://wancat.cc/post/vocational-courses/</guid>
      <description>我在技藝班所見所聞 {% asset_img slug circuit-board.jpg %}
在先前的文章提到過，我高中計畫就讀北科大五專精英班，由於這個班不好考，所以我在國三參加技藝班，用來在超額比序中加分。
我選擇的是電機電子群，學習內容大致是 焊接、佈線，以及計算電壓 。
焊接 我在加入技藝班之前已經有焊接的經驗，當初為了做 Arduino，有時需要自己焊零件，當時沒有觀念，買了烙鐵沒買海綿和烙鐵架，烙鐵頭第一天就黑了。也不知道要在電路板上焊，焊得又髒又醜，有時還把零件弄壞。
上了技藝班之後我才第一次使用了整套的焊接工具，烙鐵、烙鐵架、海綿、吸錫器、尖嘴鉗、斜口鉗、剝線鉗，技藝班的工具還不錯，至少設備完整、錫的品質還算優。
技藝班的課程基本上都是自己實做，老師會指定今天要做的東西，然後就讓同學開始做，第一天從焊三角錐開始，把六根電線兩端剝掉，焊成一個立體的正三角錐。後來還有練習拉線、做跳線、做電路，我認為這些都很好，在上了技藝班後我的焊接技巧的確提昇了不少，至少可以準確掌握烙鐵溫度與習性，可以讓手中的錫乖乖聽話。
當然班上有些同學對此沒有興趣，有些還會在旁邊亂，這不稀奇，不管是什麼課程總會有人沒興趣。只要對我而言，這是很有用的，這就夠了。
可惜並非如此
計算 技藝班的課程還有一環是練習「計算」，主要計算的內容是一個電路圖指定位置的電壓和電流。大概在第四堂課開始，老師給我們上計算的課程，老師直接告訴我們公式怎麼算，沒有多做解釋為什麼要這樣算。
對於這個我可以理解，畢竟大部分上技藝班的學生並不一定能吸收，就像是現在的國中教育，許多老師也是直接教公式，沒辦法，你就算教了原理學生也聽不懂。只是從中我發現我並不那麼適合技職教育，我的骨子裡還是希望追根究底想明白，我無法接受自己搞不懂的公式。
但這不是最糟的。
所有的計算都是「用手算」，電壓的計算基本上數字不會給你太好看，不用想約分什麼的，常常有那種 50.9 V、51 K 的缺德數字，常常你要處理的是四位數除上三位數的除法，而且要算到小數第四位四捨五入到第三位。
{% asset_img slug process.jpg 計算過程 %}
我真的無法理解，我們是未來要操作電腦的人，為什麼要做電腦完全可以取代的事？我們應該學習的是如何善用電腦，怎麼會是把人當電腦用？
在這個 AI 的時代，教的卻是計算機就能取代的事？
不為什麼，比賽就是這樣考。技藝競賽的選手就是要面對這種無腦四則運算，然而你完全無法從中得到任何有用的能力，算這個有什麼用？變人體計算機嗎？醒醒吧你永遠算不贏電腦的。
從這裡我開始看出台灣技職教育的落伍，為什麼那麼多人看不起技職？為什麼師長不願我們選擇技職？
面對桌上的一盤盤大便 過去我往往認為是因為社會「唯有讀書高」的觀念，保守家長不願意讓孩子成為一個「做工的人」，但現在我發覺政府自己就將技職教育辦的一團糟！
我只敢說電機電子群的範圍，我曾經訪問過一些讀過高職的學長，大概了解到現在的高職教學內容實在非常落伍，就像是上面舉的例子，以及各式各樣的遠古程式語言、無法跟上時代的課程，甚至據說某間高職還規定要使用 Windows XP。
我有位朋友就毫不客氣的說了高職資訊科全部都是 shit，他就是進去念之後才發現教的跟想像中完全不同，於是休學去工作了。
我知道資訊領域是社會變遷較快的領域，同樣的技術，可能五年、十年過後就變得完全不同，但台灣的技職教育沒有進步，還是在使用 20 年前的課本，還是在教著 20 年前的技術，還是在考學生如何用手算電壓。
我認同技職教育的價值，但如果政府端不出像樣點的課程，就莫怪學生不願意、企業不稀罕、家長不認同。
台灣的學生就像是要在一桌大便中選擇比較不臭的吃下去一樣，面對一樣爛的高中、高職、五專中，挑一個對自己最沒傷害的，忍痛吞下去，期望熬過去就有比較好的食物吃。
可悲台灣小孩，有未來嗎？ 我寫這篇文章是希望，政府能重新制定真正有品質的技職教育課程，在推廣技職教育的同時，把技職教育的品質做好，教授與時俱進的課程，而不是算電壓這種荒謬的內容。甚至在給準技職學生上的技藝班中，就讓學生看出其之落伍。
 「一屆不如一屆」，據說在十幾年前的高職，仍是十分重視實作。然而到了今天，高職卻越來越考試取向。
我相信台灣是辦得到的，我相信。
  延伸閱讀 可悲台灣小孩 — 一個國中生，是如何變得不聞不問？
十五歲的生涯選擇，我為何拒讀高中？ — 父子對於升學、技職教育的看法</description>
    </item>
    
    <item>
      <title>軟體開發的未來，是大斗內時代？</title>
      <link>https://wancat.cc/post/future-of-software/</link>
      <pubDate>Tue, 06 Nov 2018 22:43:52 +0000</pubDate>
      
      <guid>https://wancat.cc/post/future-of-software/</guid>
      <description>本文從付費軟體的困境，講到廣告商業模式以及付費帳號模式，再講到近年來日趨流行的**「獎賞制度」**，來談談內容創作的困境，以及當面對網際網路快速發展的因應之道。
 軟體如何賺錢 在我剛開始寫程式的時候，我就曾經想過，如果我做出了一個很好的遊戲，我該如何賺錢？，簡單就是賣嘛，付了錢我就給你程式。但這最大的問題是你如何確定買家不會將你的產品給其他人？。
我開始思考各種的商業模式，發現要賣軟體竟是一件相當困難的事，阻止盜版非常困難，其實這本質的原因在於軟體是一種邊際成本為 0 的產品。
付費軟體的困境 盜版猖獗，永遠是付費軟體最大的困境。軟體之所以有這樣的問題，正是由於它的**「邊際成本為 0 」**。邊際成本是經濟學的名詞，意思是當你增加一份產品時所需要增加的成本。生產一台汽車的成本很大，但生產 10000 量汽車可能平均下來就沒那麼大。而軟體則是一個邊際成本為 0 的產品，你要多賣給一個使用者，頂多光碟多燒一片，不然哪有什麼成本？
你以為這樣很好嗎？是的，或許你可以節省成本，但 對於盜版者而言更好 。你開發軟體需要成本，但盜版的人連開發的成本的省下來了，那對盜版者而言，可真的是「無本生意」。不只是軟體，各式各樣的創作，只要是邊際成本為 0 的，例如文章、圖畫、影片，可以被輕易用電腦複製的，都可說是邊際成本為 0 的產品，因此很容易遭受盜版威脅。
因此，邊際成本為 0 的產品，用免費的商業模式最有效率，我並不是說不該支持使用者付費，只是在效率上，免費的商業模式效率較佳。
也因為這個原因，導致廣告的商業模式興起。
免費時代來臨？ 在網際網路普及之後，盜版軟體變得越來越猖獗，基本上所有知名的商業作品一定都有它的盜版，漸漸的，購買正版已經成為一種額外的支持行為，講難聽點，是一種**「施捨」**，而不是正常消費途徑了。
軟體開發商開始注意到這個問題，於是他們開始用一種截然不同的商業模式—免費。從 YouTube、Google 搜尋引擎 ，到 LINE、Facebook ，打開 Play 商店，大部分的 app 也都是免費的，它們依靠著廣告商賺錢。
你有想過為什麼 Facebook 免費嗎？因為你對它有價值，你的加入會讓你的更多朋友喜歡使用，也就會讓廣告被更多人看見，它就能賺更多錢。
當你使用一個免費軟體，多半代表你對軟體公司有價值，你就是他們的產品之一，因此你得以免費。所以才會有人說「免費的最貴」這類的話。
付費帳號 —兼具免費與付費的解法 如果我真的不想要廣告呢？現在還有「付費帳號」這種解法，例如 Medium, Pocket, GitHub 等公司，在除了提供免費服務外，另外提供了「付費版帳號」，讓想要更多功能的使用者可以購買付費版，這樣既能保持不受廣告控制，又能有經濟收入。
但付費版帳號就不會被盜版嗎？，事實上，比較難。現代的各種付費商業模式多半是採「帳號制」，也就是你購買的是一個帳號。只要是帳號，就比較好控制，因為資料在公司內部的伺服器，如果服務是在網頁上的話更是如此，使用者無法取得完整的程式（只能夠取得單一網頁的 HTML、JavaScript &amp;hellip;），也就比較難被逆向或是破解，因為所有的程式碼都在公司自己的伺服器中。
想想看，你一定有聽過盜版的威力導演、盜版的 Windows，但你有聽過 盜版的 YouTube 嗎？盜版的 Medium？盜版的 GitHub？我相信你沒有，因為將帳號資料放在伺服器，基本上就能夠避免無限量複製，因為服務是「認帳號」，你沒有帳號，空有程式也沒用。事實上，現在許多 YouTuber 使用的付費訂閱 PressPlay 就是採用帳號制，內容都在 PressPlay 的伺服器，它可以依據你帳號的狀態來決定是否要給你內容，因此你很難盜版。而有名的付費遊戲— Minecraft 也是採帳號制，這樣可以方便使用者在不同設備遷移，而且管控簡單。
大斗內時代，可能嗎？ 但即使是上述所說的付費帳號制度，仍然是有可能被盜版的，因此在過去許多軟體開發商設計很多數位鎖，想要防止被盜版，但 歷史證明，都沒有用。開發數位鎖浪費了軟體開發商的大筆時間和金錢，但最後鎖住的，卻往往是有良心乖乖買正版的使用者。</description>
    </item>
    
    <item>
      <title>OurLiveWorld 回到過去</title>
      <link>https://wancat.cc/post/time-travel/</link>
      <pubDate>Sat, 20 Oct 2018 14:33:34 +0000</pubDate>
      
      <guid>https://wancat.cc/post/time-travel/</guid>
      <description>自古以來，穿越時空的能力令人嚮往，但就算你是神（創造），仍無法辦到。
 地獄之旅 故事要從我們一次去地獄的冒險開始說起。隨著文明的開發，我們世界的地獄資源越來越短缺，尤其是大量的 終界箱 需求，讓烈焰桿的消耗超乎預期，用完已經是不久之後的事了。
因此我們計畫一趟地獄要塞之旅，我們在先前的日子裡已經發現了地獄要塞的存在，也去過幾趟，把一些寶箱都開箱了。但儘管去了很多趟，它仍是十分危險的地方，底下一大片岩漿海不說，整個要塞遍布著發射火球的 烈焰使者，還有很難打的 凋零骷髏。
這天剛好 Andrea 有空，我們就一起來出任務。
出發 我們基於先前去得到的材料，烈焰桿與熔岩球，得以釀製抗火藥水，有了抗火藥水，就不怕烈焰使者的攻擊，基本上在要塞就安全了多。
走地下道，來到了我們的轉運站 &amp;mdash;地獄門，出發到了地獄，尋著過去留下的痕跡，一路找尋到了地獄要塞的入口。
Andrea 說下山的路不好走，於是我們 挖了一條隧道下山，接著吞了抗火藥水，進入要塞之中。
遇害 Andrea 第一次進到這座要塞，非常的緊張，不知路怎麼走又一直遇到凋零骷髏。而我目的要刷烈焰使者，一時也不知在哪刷比較好，隨意的上了一棟高樓，就準備開刷了。
 我拿我的鑽劍去敲了一下，烈焰使者受傷，飄到空中，打不到。我拿出我的神弓，拉滿弓一射，好巧不巧一隻殭屍豬人走到我面前。
 頓時，四周響起了殭屍豬人憤怒的聲音，我知道我犯下大錯了，趕緊轉身就跑，Andrea 注意到了，但她不熟悉路，也幫不到我。
我從高台上往下跑，一路沒煞車，在走一條一格寬的樓梯時差點跌進岩漿海。
我跑到了要塞的走廊上，這時連凋零骷髏也來找我了。後方是幾十隻憤怒的殭屍豬人，而前面則有凋零骷髏數只，我心一橫，有我這把鋒利4鑽劍，還有什麼打不贏的敵人？
但在緊張下，我的攻擊卻屢屢放空，而後方 Andrea 的救援卻遲遲不來，舉盾擋住一邊就遭到另一邊的攻擊，凋零骷髏的凋零效果讓我看不清血量。而當我正在吃金蘋果時，眼前出現了一片紅屏。
我死了。 一場空 憤怒的殭屍豬人停止了，恢復了平常呆呆的樣子。Andrea 終於到了，但看到的已是掉了滿地的物品。她趕緊幫我撿起來，能撿多少算多少，但她的背包太滿，裝不下我的所有裝備。
我在家裡重生，望著自己空空的背包，以及歸零的經驗條。趕緊抓了些破衣服，拿了把粗製的鐵劍，帶瓶抗火藥水，準備衝回地獄。
Andrea 聽我的指示，先離開危險的要塞，回到我們地獄的基地，我和她在基地會合，先給我一些撿到的物品。
 就只有這樣？
 只撿回了一把鑽劍，我那吃到一半的金蘋果，以及一條褲子。
「也許還有些遺落的在那邊」，我們趕緊出發，再次進入要塞，但到了我所死亡的地點，卻不見任何東西。
 不會吧&amp;hellip;
 我不敢相信，在要塞中不斷尋找，但就是找不到我遺落的物品。
 回到了家中，我的裝備已不再，原本一趟掠奪之旅，竟然換來一場空。
 「你想&amp;hellip;回到過去嗎？」
 回到過去 「可以嗎？」，Andrea 十分震驚，因為 就算是創造的世界，仍辦不到穿越時空這件事。
其實在八月的時候，我就開始用版本控制工具 Git 來紀錄我們的世界，每次玩完就會做一個紀錄。因此我就得以回到過去存檔的任何時間點。
我先關閉了伺服器，將這次的更動先放到一個分支，將世界 checkout 回主分支，就回到了我們出發前的世界。
$ git add . $ git checkout -b dead-branch $ git commit -m &amp;quot;死了&amp;quot; $ git checkout master $ .</description>
    </item>
    
    <item>
      <title>十五歲的生涯選擇，我為何拒讀高中？</title>
      <link>https://wancat.cc/post/progression/</link>
      <pubDate>Sun, 14 Oct 2018 08:42:11 +0000</pubDate>
      
      <guid>https://wancat.cc/post/progression/</guid>
      <description>兒子—林宏信： 我現在國三，從小六時接觸了 Scratch，國二開始學習 Python 程式語言，我漸漸的確定這是我想走的道路—做一名工程師。
//Scratch 為一個圖形化的程式語言，可以透過拉積木、組合的方式，來做動畫、寫遊戲。 https://scratch.mit.edu/
小六時，我開始玩 Scratch，心中想著要做出好玩的遊戲分享給大家，於是開始設計遊戲，製作出一個又一個的遊戲，在別人都在玩做好的遊戲時，我在設計屬於自己的遊戲。我很享受這種感覺，將心中的藍圖實現出來， 創造 的感覺。
到了國一下學期的時候，我發現 Scratch 已經不敷使用，沒辦法寫出更好的程式了，於是我開始學習程式語言，後來甚至接觸 Linux 作業系統，開始替人做圖書管理系統。在這些過程中，我逐漸確定這是我的熱情所在。
對高中的不滿 我平常的生活是，在學校認真上課，將作業寫完，回家就開始 「工作」 ，寫程式、寫文章、寫音樂。我幫自己安排了很多工作、很多專案，這些都是能使我成長的事，我也樂在其中，但每每遇到段考，就會使我的生活遭到破壞。為了準備考試，我必須將工作的時間拿去讀書，讀一些 無法使你成長的教科書 ，浪費黃金的課餘時間。
現在的高中教育，坦白講是為了升大學而存在。內容教授國英數自社等基本學科，但開始越發奇怪，脫離了「義務教育」的範疇。尤其是國文，目前的教學方式 完全沒有辦法促進表達能力 ，要取得高分只需要 背誦和考試技巧 。而考試制度又扼殺了語言的多變性，把文義僅限在唯一的解。
在我兩個姐姐就讀高中的期間，我就知道了普通高中並非我想要的學校，我將會花許多時間去學習基本科目。但這並非令我反感的原因，對我而言，基本學科的內容也是有趣的，我對於「學習」沒有那麼勢利，不會說要對我有用的知識才肯去學。問題是 我得花許多時間去準備考試 ，這就不有趣了，事實上這已經不是在「學習」了。而這些時間，是我原本可以用來充實自己、做專案的時間。
所以我下定決心， 這樣的生活到國中就好 ，三年了，體驗的也夠多了，高中我不要再繼續下去了。
出路在哪裡？ 我開始去找我的出路，我問了工程師朋友：如果想當工程師要怎麼升學？基本上大多的回答是念普高或高職都可以，重點是大學。我不免感到懷疑，既然大家的目標都是大學，為什麼我們不能直接去考？反而還要在高中三年作為跳板，這樣高中不就像是補習班一樣嗎？
我對於普通高中的教學內容感到不滿意，認為這會浪費我大量時間和精力，而且會壞了我學習這門知識的胃口，因此我決定走技職的路。
在我父母的觀念中，是很支持技職教育的，台灣太多只會考試的學生，卻缺乏實做的訓練。雖這麼說，但過去「技職」從來不在我的考慮範圍內，由於成績優異，似乎就是注定要念普通高中，注定要繼續讀書考試下去。
直到我開始去了解，開始找自己的出路後，我才發現，自己的未來不一定要侷限在普通高中裡，我可以作為一名專業的技術人才，提早開始走自己的道路。很慶幸我的父母在溝通後也支持我的決定，我想 願意支持孩子決定的父母，就是最好的父母了。
未來，從現在開始 我的夢想就是成為一位現在很夯的斜槓青年：工程師/寫作者/作曲家，選擇技職教育不代表限制自己的未來，我相信只要內心清楚方向，走哪都不會迷失。
我的學校現在目標是 北科大 新開的五專菁英班— 自動化工程科 ，內容包括程式設計、電機、機械等內容，這個班之所以吸引我，是因為在那可以得到台北科技大學的豐富資源，而且豐富的實做課程，以及豐富的教師資源，同時我也相信，在只收30人的班級中，能遇到更多像我一樣懷抱著熱情的人。 而在生活中一步一步朝著理想邁進，這不就是最幸福的事嗎？
 父親—林寓森： 老實說，兒子選擇讀技職體系，心中 並不是完全沒有遲疑與猶豫的 。畢竟我是成長於台灣舊聯考時期的人，很多習慣性的反應還是直接出現。像是「你的成績是學霸級的耶，可以念很困難的學科，念技職會不會太可惜了啊」，「你跟其他念技職的人會不會有很大的差異，適應上會不會有問題？」，「現在才國中生耶！交給他自己決定未來行不行啊！會不會是我自己太不負責任，沒有好好幫他們規劃？」。
其實不光是對兒子，兩個姊姊決定念美術與音樂時，我心裡都有過遲疑。
但是我心中的這些O.S.我全部沒說出口，因為我相信他們，也相信自己對於個人成長的信念。
我的信念就先不多說了，有興趣了解的人可以看我在站上發表的文章。我在這裡想對其他為人父母者強調一個我的判斷邏輯—「讓孩子相信自己是一個絕對不會失敗的選擇」。
這個邏輯並不是說，小孩的選擇不會錯誤；而是說當他們能真正相信自己時，即使選擇錯誤，並不會因此就喪失信心，一蹶不振；當他們是自己做的選擇時，失敗了不會怨天尤人，而是調整自己。當我們試著要去幫他們做未來決定時，依據的是目前的環境狀態，但是未來瞬息萬變，誰也沒辦法有把握一定選對。那麼讓他們做自己喜歡的事情，即使不成功或是過得困難，做的過程總還是有開心的感覺，這就夠了。很多人生活過的舒適、安全、無憂，但是做的不是自己喜歡的事情，甚至不知道自己喜歡什麼，這樣的生活說真的，還比較不快樂。
所以表面上我做的似乎是一個冒險的決定，但我認為這其實是一個最安全的決定，這取決於背後對於生活價值的信念。
很多人擔心小孩不夠成熟，讓他們自己決定可能在生活上會很容易失控。我自己的經驗是，當他們覺得可以自己決定時，反而會更謹慎，更會想要聽你的意見參考；而決定了之後，更能投入想做的事情與克制玩樂的衝動。有人會說，「小孩的特質不同，不能一概而論，自制力差的小孩不能這麼做」。
我的三個小孩的特質都不同，也有人真的自制力不好（就不點名了），但是結果都一樣耶。雖然其他生活部份的自制力各有差異（其實我的自制力是家中成員最差的XD），但是他們對於自己的選擇都是全力投入喔！
真的沒有理由不相信他們啊！</description>
    </item>
    
    <item>
      <title>當老師對我們說：「可悲台灣小孩」</title>
      <link>https://wancat.cc/post/poor-taiwanese-kid/</link>
      <pubDate>Sun, 14 Oct 2018 08:22:13 +0000</pubDate>
      
      <guid>https://wancat.cc/post/poor-taiwanese-kid/</guid>
      <description> 「這句話真是說到心坎裡」，我笑著說 「就只怕過幾年後，他就變『可悲台灣老師』」
 一則笑話 我的朋友有次跟我聊起他的家政老師。
他的家政老師是一位年輕的新老師，充滿著熱情，似乎希望能在家政課做一些「有意義」的課程。所以他出了很多報告作業，上很多課程，而且從不借課考試，因為他覺得，台灣小孩的綜合、藝文課程被拿去考試，真的很可憐。
但同學們並沒有認真的去做報告，反而覺得很煩，都只想躺分，丟給組員做。上課也沒什麼在聽，反倒是很多同學在訂正考卷、寫講義等等，根本沒在上課。
我朋友說，他的老師就很生氣，有次就對他們班同學說：
 「你們這群可悲台灣小孩」。
 聽到這裡，我已經笑到不行，
 「這句話真是說進心坎裡」，我笑著說 「就只怕過幾年後，他就變『可悲台灣老師』」
 可悲台灣小孩與老師 這則笑話之所以好笑，就是因為我們的確可悲。
我們的學生生活被考試佔滿，漸漸的讓學生也變得考試導向、勢利，只在乎「會不會考」，再也不在乎學習的本質是理解、是應用。
有時，當老師充滿熱血，希望做些什麼，帶些不一樣的課程來改變時，反而會受到學生的反彈，反而覺得老師很煩，還不如拿來考試、自習。
這樣子的反應，往往是毀了一位教師熱忱最可怕的殺手。
我如何成為一位可悲的國中生？ 一個學生，是如何變得漠不關心？
從升上國中開始說起，在國一時，我對於綜合、藝文課是高度參與的，一方面老師懂的帶學生，而且國一的課業還沒有那麼重，所以在上考試科目之餘，能夠做一些不一樣的事，我想大部分學生都是喜歡的。
到了二年級，我開始有自己課餘的活動，也就是寫程式。我在家需要大量的時間來維持我的興趣，我甚至一度考慮不參加第八節，但後來考慮怕不能跟上進度與造成別人麻煩，仍然是參加了。
從此在學校，我的目標就是「將所有學習相關的事情在學校完成」，什麼意思呢？就是將作業在學校寫完，要考的科目在上課讀完，讓回家時間百分之百都是屬於自己的。
漸漸的，我開始將一些「我認為學不到東西」的課用來寫作業、自習；漸漸的，當老師出報告作業時，心中只有反感，與麻煩；漸漸的，我開始變成自己瞧不起的那種「可悲台灣小孩」。
夢中的教室 我有一個夢，是一間教室，中間一個大桌，老師不站在講台上，跟同學一塊坐在桌旁。老師上課，但強調的不是如何解題目，而是為什麼我們要學這個？如何理解這門學問。學生可以自由的討論，如果願意，學生能向大家發表自己的看法，甚至自己準備內容向大家發表。
沒有正解，沒有標準答案，沒有考試技巧，沒有「這題目有瑕疵，但你還是得這樣寫」，只有學習本身。
 「這樣的教室，真希望不只是出現在夢裡。」
 </description>
    </item>
    
    <item>
      <title>YaCy安裝教學</title>
      <link>https://wancat.cc/post/yacy-install/</link>
      <pubDate>Sat, 22 Sep 2018 20:26:23 +0000</pubDate>
      
      <guid>https://wancat.cc/post/yacy-install/</guid>
      <description>YaCy是一個開源的點對點搜尋引擎 本文將講解如何在 Ubuntu Server 上安裝 YaCy 搜尋引擎，並用Nginx做反向代理，將網址改成像是 yacy.example.com 的形式。
 YaCy 架好的範例可以來我架設的伺服器使用看看https://yacy.wancatserver.tk
環境說明 本文假設有一台無圖形界面的伺服器以及有圖形界面的Desktop。Desktop必須要能夠使用瀏覽器。 假設伺服器網域： example.com，請將本文所有example.com改成你的網域名稱 假設使用者名稱：user ，請換成自己的使用者名稱
 如果沒有網域名稱仍然可以安裝 YaCy ，只是需要用 ip:8090 的形式來連上它。 如果沒有真實 ip 就只能在內網使用
 伺服器安裝 Java 8 YaCy可以使用 OpenJDK，也可以使用Oracle官方的JRE。 OpenJDK使用apt安裝
$ sudo apt install openjdk-8-jre 官方的JRE比較麻煩，可參考此文章
安裝 YaCy 至官網下載程式。
{% asset_img slug download.png %}
將程式上傳至伺服器，請將/path/to/yacy.tar.gz替換成你下載的路徑
$ scp /path/to/yacy.tar.gz user@example.com:/home/user/ 接下來以ssh登入伺服器
$ ssh user@example.com 解壓縮，將yacy.tar.gz替換成你下載的路徑
$ tar -zxvf yacy.tar.gz 解壓縮完可以看到家目錄下多了一個目錄yacy，裡面有 startYACY.sh, stopYACY.sh, killYACY.sh, reconfigureYACY.sh, updateYACY.sh等執行檔，以及許多資料夾。
我們先去打開防火牆，YaCy使用的是 8090 port (HTTP)，以及8443 (HTTPS)。</description>
    </item>
    
    <item>
      <title>從今天起，不要使用 .docx</title>
      <link>https://wancat.cc/post/dont-use-docx/</link>
      <pubDate>Sun, 16 Sep 2018 05:50:26 +0000</pubDate>
      
      <guid>https://wancat.cc/post/dont-use-docx/</guid>
      <description>妳使用什麼文書軟體？相信大部分的答案會是 Word, Powerpoint, Excel ，微軟Office的產品。那是否可以麻煩妳做一件事？在 存檔的時候選擇用ODF 。
 檔案格式的霸主 &amp;mdash;OOXML 早在1993年，微軟就推出了Microsoft Office 3.0，在當時還只能使用純文字編輯的時代，這樣「所見即所得」的編輯器是一個創舉，而買軟體要付費這件事也天經地義，畢竟沒有人逼妳。
漸漸的在這二十多年，微軟Office在文書軟體中取得了霸主的地位，絕大多數的文件檔都是微軟的私有格式 &amp;mdash;OOXML，也就是docx, pptx, xlsx等微軟Office的專用檔案格式。
OOXML雖然號稱是 「Open」 ，也是一項國際標準，但是微軟總是會在新版的軟體中加入OOXML不包含的功能，導致其他office軟件，或甚至是微軟自己的舊版office，都無法正確開啟檔案。
同時微軟對於舊版office的支援也可說是毫不留情，新版的檔案在舊版皆無法開啟，變相逼迫使用者升級，但這樣也不利於須長久保存的文件（十年過後文件就打不開了）。
微軟霸權 由於OOXML的普及與它的封閉，漸漸的許多使用者「必須」得購買微軟Office，才得以工作、做報告，甚至是政府機關，每年都得花大量金錢購買微軟的授權，而每次的更新，都是痛苦的開始。
而國中小的電腦課卻上的是Windows系統，教的是微軟Office，一批一批出來的學生也都只會使用微軟的產品，未來想要轉換也變得更加辛苦，導致許多人最後放棄，繼續使用微軟的產品。
開放檔案格式ODF 這樣的問題也早早就被注意到了，在2002年，許多的公司與團體聚在一起，討論開發一項 開放 的檔案格式。在2005年5月，OpenDocument成為了國際標準，也就是現今的ODF檔（Open Document Format）。而在2012年發布ODF 1.2的更新版，至此無再更新標準。
說ODF妳可能會很陌生，其實odt, odp, ods等檔案就是ODF在不同種類文件下的副檔名。odt是文件（相當於Word），odp是簡報（相當於Powerpoint），ods是試算表（相當於Excel）。
現今幾乎所有的文書辦公軟體，都能完整支援ODF，由於ODF是開放的檔案格式，而且很少異動，所以軟體相容性做得非常好。而且可以跨平台、跨軟體支援。
為什麼妳不該使用OOXML？ 首先，OOXML對於其他軟體的支援度很差，妳可能有經驗，當妳把docx檔丟到Google drive，在上面開啟都會跑掉格式，這種感覺真的很差，妳可能會怪Google drive沒做好相容，但實際上是因為微軟在程式裡 「故意讓它不相容」 導致。
再來，如果妳像我一樣使用Linux系統，別人給妳OOXML妳會很火大，Linux沒有微軟Office，它不只逼我買Office，還連帶逼我買Windows。
最後，OOXML很喜歡包一堆沒用的東西進去，導致妳的檔案變得比較大。
國際間的ODF趨勢 在ODF格式訂定後，許多的國家包括美國的麻省、日本、英國，都開始將ODF定為國家的標準格式。而台灣在這一塊也不馬虎。
事實上，台灣在2009年也將ODF訂為國家的文件標準，政府也開始規定，公部門之間的文件交流須使用ODF格式。此舉也有助於政府節約財源，從2008年到2014年間，政府用於購買微軟Office的支出就高達32億元，每年平均支出需要4億元。
可惜的是，許多人尚未知曉ODF格式與它的好處。
該如何改變？ 最簡單的方法，就是從「存檔」開始，只要在存檔的選項中，選擇ODF檔，妳就邁出了離開微軟的一小步。是的，妳 不一定 要更換軟體，妳仍然可以使用順手的微軟Office，但這樣就是留給別人或未來的自己選擇的空間，當妳未來不打算繼續購買時，可以不要承受那麼大的代價。
如果妳今天已經下定決心，要離開微軟，那妳可以開始尋找替代微軟的文書軟體，在這裡我會推薦LibreOffice。
LibreOffice是一個開源軟體，意指妳可以免費的下載，更改程式碼，並再發布，使用完全不用擔心盜版的問題。
過去或許你有聽過OpenOffice，但由於複雜的原因（被Oracle併購），開發社群自行建立了一個分支（branch），開始了LibreOffice計畫。
而現在LibreOffice計畫已經超越了OpenOffice了，有較大的社群進行維護，在安全性與功能上也較OpenOffice優越，因此我會推薦直接使用LibreOffice。事實上兩者使用界面是差不多的，想要隨時更換也不是問題。
我們需要讓更多人知道 我的媽媽是學校老師，儘管現在政府已經規定要使用ODF格式，她要工作時仍得要開啟各種OOXML文件，導致她常常跟我抱怨沒辦法在家裡的Linux系統工作。
而現今學校的電腦課教學仍是以微軟Office為主，導致學生普遍對於自由軟體、ODF等概念缺乏認識，更難在未來推動ODF。現在已經有許多學校開始推動自由軟體的教育，我們希望這樣的改變可以繼續成長下去！
我們需要讓更多人認識ODF，讓更多人知道文書處理不一定要用微軟Office！
這樣的改變，可以從妳的存檔開始，從今天起，存成ODF。
參考資料 國家發展委員會 &amp;mdash;推動ODF為政府文件標準格式研析報告 http://www.itc.ntnu.edu.tw/files/archive/444_932e8ff6.pdf IThome周峻佑 &amp;mdash;政府機關文件新趨勢，ODF成為主要通用格式 https://www.ithome.com.tw/article/117301 維基百科 &amp;mdash;開放文檔格式 https://zh.</description>
    </item>
    
    <item>
      <title>2018 暑假回顧</title>
      <link>https://wancat.cc/post/summer-vacation/</link>
      <pubDate>Wed, 29 Aug 2018 07:15:01 +0000</pubDate>
      
      <guid>https://wancat.cc/post/summer-vacation/</guid>
      <description>兩個月(?)的暑假，到底幹了些什麼？ 從七月結束之時，我就開始有了「這個暑假什麼都沒做」的恐懼。明明每一天都過得很充實，但努力回想，卻想不出自己完成些什麼。
為了幫助我的回想，我要來將它寫成一篇文章，來避免我忘記，同時也是紀念一下今年的暑假。
日常的規劃 講到這個，我在暑假開始之前，就很興奮的開始規劃一天中的時間表。幫各項活動標上百分比，仔細的計算所需花用的時間。
規劃圖  讀書: 30 寫程式: 20 玩樂: 30 swap: 20 每日五點起床  畢竟要國三了，每天讀一下複習講義是必須的。 五點起床是我現在的生活作息，我在之前的一篇文章曾經說明過早起的各種好處，有興趣可以去看看。
每個大項例如寫程式，還有各個小項。那swap代表著空閒的，自由運用的時間。 所以照這個時間表，讀書每天大約四小時，寫程式三小時，玩樂四小時。 但我還是沒有做到
真正ㄉ情形 讀書 暑假第一天，我非常確實的唸了四個小時的書，八科都念。然後唸完真的是呈虛脫狀態，沒有想到會這麼累，接下來只想玩樂了。可見平常在學校有五成都在放空。 再來出乎意料的是，被雜事浪費了許多時間，不同活動的交換之時，常常拖太久，結果時間沒有想像的多。
於是第二天，我就只讀了兩個半小時。
但是我發現，要完成一週的複習講義不需要每一科一天半小時，不需要，可能只要一天 15~20 分鐘足矣，結果每天讀書的時間越來越短，但還是都有準時完成複習講義。
原先我是採用時間分配，也就是設定每科一天的時數。後來發現這樣不行，一方面花的時間太高，再來每科的時間比重其實不太均衡。像是數學就需要花比較久，而社會科通常比較快。
於是我改成採進度分配，每天開始讀之前，先翻一下今天需要寫到哪裡，完成自己分配的進度就換下一科。
寫程式 暑假前兩週我非常認真的在寫圖書管理系統，這個Project我從五月開始做，第一次寫web、第一次寫Javascript、第一次寫Node.js。
我每天有寫程式，但我卻沒有辦法寫三小時。寫程式當然會累，或許因為以前都是利用晚上的零碎時間寫，不會有這種「時間太多」的問題，到了暑假，我才發現我的行程安排與計畫執行非常的爛。
 在過慣了平常被安排好的生活，當現在終於可以自己安排時，反而不知道該怎麼做了。
 玩樂 玩樂大概是執行的最精確的(喂)，我玩的遊戲只有Minecraft，從今年一月開始，我就和幾個朋友以及我姐一起經營一個世界 &amp;mdash;OurLiveWorld，之前也有寫一篇 文章 來講其中遇到的小故事。
暑假的期間，我們的進度終於要去討伐終界龍啦！但我的主要戰力 &amp;mdash;Ken 平常在家玩電腦只想打LOL，不想玩Minecraft，於是前兩週我幾乎都只有和我姐Andrea經營世界，挖挖礦、蓋一些基礎建設、四處探險。
到了一個週末時Ken來我家玩，我們才出發去討伐終界龍。這個故事有點長，以後有機會再說明。
JSP 從暑假第二周，我開始準備JSP的演講，但一開始準備的速度很慢，就只是寫稿、寫稿、再寫稿，也沒有每天寫，到了第三週開始有危機意識了，才開始每天趕稿。 詳細JSP的紀錄可以來看我的2018 JSP 紀錄與心得
八月第一周每天去準備演講、練口說，到了星期五出發去JSP。
三天結束後，回來開始剪影片，花了三天時間完成。 影片剪完就開始寫心得，一樣是斷斷續續，但不知不覺也寫了4000字
現在想想，JSP應該是今年暑假最主要的活動了。
暑輔 從暑假的第四周開始暑輔，在二年級的時候我非常叛逆的不參加暑輔，不參加暑輔在幹嘛呢？寫程式，做自己的計畫，準備JSP。
現在要升上三年級，知道自己一定得上暑輔，不然會缺一堆考試和課，就只得乖乖的去。
暑輔期間我的安排是，上午上課，下午則和Ken在我家讀書，讀書兩小時後來玩Minecraft。在接近JSP的時候則是在讀完書後準備JSP。
暑輔期間大概是Minecraft玩的最兇的時候，一方面Ken在我家，我去工作怕他無聊，再來上午上課下午讀書，接下來的工作效率也不好，所以我把工作時間都安排到五點起床到七點上課之間，活力正佳的時候。
伺服器 在我的工作項目中，有一大項就是管理我的伺服器啦！ 在今年，我將我家的舊Dell桌機給改裝成伺服器，灌上了Ubuntu 18.04 Server，原先是將它灌Lubuntu，給我爸當文書機用，但因為他不常使用（都用他的Lubuntu 筆電），所以我就把它給拿來當server了。
Minecraft server的主要需求就是玩minecraft，我開服都是自己架，以前用Aternos，但因為要排隊所以一直找替代，後來學會架服，就用自己的筆電，但沒辦法通外網，而且會讓筆電容易當。
我的server雖然不強，是七年前的電腦，只有二核心的AMD，但至少minecraft的伺服器跑得動，只是騎馬或飛行時會容易破圖。</description>
    </item>
    
    <item>
      <title>2018 JSP 紀錄與心得 (二)</title>
      <link>https://wancat.cc/post/jsp8-2/</link>
      <pubDate>Thu, 23 Aug 2018 17:43:06 +0000</pubDate>
      
      <guid>https://wancat.cc/post/jsp8-2/</guid>
      <description>參加 JSP 國中科學探究聯合發表會 的所見所得。事前的準備，到結束後的回味，新的故事，至今仍持續發生。 本次主題的系列文章, 演講影片
 老街解謎 在看了海報發表以及趣味課程後，我們在下午四點即將出發到大溪老街，進行大溪老街實境解謎，要在大溪老街中，找出各個謎題的答案。我將網站的連結放這邊 （抱怨一下，這個網站沒辦法用Firefox開啟！！害我用了55 mb下載 chromium）
裡面的每一題都十分困難，需要實際到老街裡面走，而且不太可能用搜尋引擎得到答案。
我一開始是非常熱血的，在前往的路途上就開始研究地圖，根據主辦老師給的地圖，我發現一些可疑之處，並且開始計畫一個攻克路線。 結果到了現場，我們的隊輔表示已經跟友隊串通好要一起破解，我就失去動力了，有時候自己快解出來了卻「被」公佈答案，真的是最掃興的事。
直到我發現，答案都在網頁裡。
熱血駭客魂 事情是這樣的，原先我以為答案在伺服器中，客戶端將輸入的答案傳送給伺服器核對，伺服器再回傳是否正確。但是我關了網路，卻仍然可以知道答案是否正確，證明了「答案」一定被紀錄在網頁的某個角落。
哇！發現這個之後不得了，我立刻跟我的工程師朋友講這件事，就用手機想來看原始碼，手機打不開，於是就出動了我隨身攜帶的筆電。
我和我朋友的熱血駭客魂立刻爆發了，我們雖然無法自己找出答案，但可以追求屬於我們的勝利。原本我想答案應該會被隨便擺在某個陣列或是物件中，於是就根據前面所得到的答案內容下去搜尋，應該就能找到擺放答案的陣列。結果不然，什麼都沒查到。我們繼續嘗試用各種關鍵字，像是「答案」、「answer」、「第六題」等等，仍然一無所獲。
看來設計網頁的人有想刻意隱藏這個答案，沒辦法那麼容易破解。
我們開始一行一行慢慢看原始碼，有時候看到關鍵字搜尋，我們兩個都對Javascript(撰寫網頁程式的程式語言)不太擅長，因此看的有些吃力。
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;../js/md5.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 當我們看到這一行的時候，我朋友突然大叫。
 天啊！它竟然用MD5!這下解不開了。
 我不知道MD5是什麼，朋友解釋說，MD5是一種密碼雜湊函式，簡單來說，可以將一個資料轉換為一段暗碼，但你難以透過暗碼去推回原先的資料，也就是單向函式。
那要如何利用MD5? 以這個網頁為例，假設答案是「地瓜」（我絕對沒有要劇透的意思），那網站就先將「地瓜」用MD5加密成一段暗碼，然後把暗碼放到網頁裡面。 當使用者輸入答案時，網頁的程式將會將輸入的答案用MD5加密，然後比對加密的結果跟原先放在網站裡的暗碼是否一致，如果一致則代表使用者輸入的答案是正確的。
在證得了這個網頁使用MD5來防止破解後，我們就放棄透過看原始碼來取得答案了。雖然破解失敗了，但是這個破解的過程，或者說跟朋友一起破解的過程，卻是我從未體驗過的。
撩妹&amp;hellip;不，我們撩 Object 話說JSP最刺激而瘋狂的活動就是**「隱藏任務」**啦！第二天的晚上你別想睡覺，有著最困難的任務要和你的組員一起完成。我們去年在福科的隱藏任務是**「開店計畫」**，我們從下午到夜市探勘，到晚上在體育館內討論，我還負責了影片的製作，結果竟然到了半夜三點才睡覺，而且隔天六點就得起來。
隱藏任務雖然辛苦，但非常好玩，在去年的最後一天發表會上，所有人都非常熱烈，台上與台下在熱絡的嘴炮討論。最吵的莫過於我們學校的學生了，每個人好像都不怕生，對台上的講者有一堆意見，這可歸功於我們科研社老師平日的「教育有方」。
而今年的隱藏任務是什麼呢？「科學幽默Slogan」（這是我自己的取名啦），看中最近蔚為流行的「撩妹語錄」、「負能量語錄」，今年的隱藏任務就是要來想跟科學相關的各種Slogan啦！
那我們這組想了什麼呢？我們一開始就打算反骨到底，撩「妹」太嫩啦！我們來撩弟，但一群雄性動物不知道該怎麼撩自己；再來是使用的語詞，我們絞盡腦汁，還是想不出什麼可以用來騷擾同性的詞彙。
於是有人說不要針對性別啦！都撩好嗎？都撩。咦？那就變成「撩People語錄」了？ 這時，我朋友突然用他的工程師專業說了句：
 「不然『撩Object語錄』？」
 其他人都愣在那裡，只有我當場笑倒。
跟大家解釋一下，Object 物件，是在程式設計中的一個概念，在物件導向程式設計中，認為程式是由各種「物件」所組成的，而通常這些物件的最高Parent物件就是Object，所以「撩Object」，根據多型的原則，就是撩了所有的宇宙萬物了。
// 在我的文章中有講解簡單的物件導向觀念，有興趣的朋友可以去看看。物件導向的細節很多，如果想知道更深入的可能要自己去查囉！
畢達哥拉斯 那既然確定要「撩Object語錄」了，那也不用在乎受眾是誰，我們開始想各個科學家的撩Object語錄。 幸好強者我朋友，平日都在看一些怪怪的書，科學素養很高，認識許多科學家和他們的產地。我們常使用一種比較艱澀的鋪梗法，是將科學家本來自己的理論，為了撩Object而故意弄成錯的，例如我自己很喜歡的一則:
 畢達哥拉斯: 「你是唯一的無理數」
 還是稍微解釋一下，畢達哥拉斯的教派（他有一幫的弟子）有一個思想，是對「比例」的追求，他們相信所有的數字都可以用 &amp;ldquo;a/b&amp;rdquo; 這樣來表示，然而當他的一位弟子證明了正方形的斜邊長，也就是√2是個無理數時，他弟子就「溺死」了，我是說被溺死了。
伽利略 再舉一個比較熟知的例子，伽利略應該很多人都熟悉。
 伽利略: 「我想和你一起掉下去」
 伽利略是推翻過去亞里斯多德「越重東西掉落速度越快」理論的人，在他著名的比薩斜塔實驗中，他將兩顆材質相同但質量不同的球體，從比薩斜塔上往下丟，證明物體的掉落速度與質量無關。
所以「和你一起掉下去」，我們就永遠不分開啦！
完整的內容 這張做一個小註解，它是我們的另一位組員想的，唯一不是我們這兩個阿宅想的內容。非常令人驚訝的是，在發表會上，這是最成功的一則。</description>
    </item>
    
    <item>
      <title>2018 JSP 紀錄與心得 (一)</title>
      <link>https://wancat.cc/post/jsp8/</link>
      <pubDate>Mon, 06 Aug 2018 20:00:00 +0000</pubDate>
      
      <guid>https://wancat.cc/post/jsp8/</guid>
      <description>參加 JSP 國中科學探究聯合發表會 的所見所得。事前的準備，到結束後的回味，新的故事，至今仍持續發生。 本次主題的系列文章, 演講影片
 JSP 簡介 今年很高興又參加了JSP，自從去年在我的學校 &amp;mdash;福科國中舉辦後，就深深愛上了這個活動。 JSP的全名為 國中科學探究聯合發表會 ， Junior Scientist Party ，是一個非比賽導向，純粹讓學生進行交流與交朋友的科學派對。
每一位參加的學生，都必須準備一點功課，可能是將你的研究成果做成一張海報，與觀眾們互動；抑或是準備一項科學課程，帶著學員們一起做；或者是在大會議廳中向所有人發表你的研究成果。 不管是哪一種都不簡單，所以參與的學生個個是有行動力、勇敢且努力的人，花了很多時間準備，才能來到這裡的。 而來到了JSP，也並非是跟同校的在一起，所有的學生會被打散到各個小組中，能因此認識不同的人，建立新的人脈。
去年我曾經參加，深受感動，因此今年，我仍在這裡。
事前準備 如前面所說，需要準備一個發表的項目。去年我是做海報分享，介紹我自製的Arduino紅外線遙控車。那今年我要挑戰更大的項目，就是在百人會議廳前進行專題發表。
題材呢？我在今年參加台中市的科展，是製作單感測器循線車，可能是科展講到會怕了，不太想要講這個題材。另外一個就是在比科展的同時，自己在製作的遊戲專案 &amp;mdash; FireWheel火輪手槍，一方面較有趣、新鮮，二來老師也認為資訊領域是JSP較少見的題材。從暑假的第二周開始，我就在準備這場演講。 講稿連結 我寫了非常多的內容，雖然要講的只有遊戲中的「碰撞檢測」與「三角函數」，這兩個有點偏數學的項目，但是一寫不得了，每天都寫了超越千字（打字太快了），結果到所有內容寫畢，才發現已經14000字元了，根本不可能在10分鐘的報告中講完。
這時老師也給了一個方向大轉彎，突然要我放多一點的歷程，像是怎麼學習程式的，途中遇到的困難等等，但隔天就要在學校進行試講，實在來不及，也不知該怎麼改。到了星期一在學校對著老師同學試講時，整整講了37分鐘，是限定時間的將近4倍。在最前面找同學上來試玩的地方，讓場面變得很歡樂，老師也說我臉上出現了「興奮」的神情，但在後面講的越來越久時，興奮的表情開始慢慢的黯淡。
在星期一的試講結束後，老師給了很多建議，最多還是要「刪」，刪是很正常的，在做科展的報告時我就了解，反正我還有部落格，沒法在口說講完的內容，就放在部落格給有興趣的看就好。最後一路刪刪刪，刪到只剩遊戲簡介、試玩、架構以及圓形對圓形的碰撞檢測。 星期二時我帶著麥克風、筆電，一個人到教室開始練習口說，一次一次試，逐漸可以把時間控制在15分鐘內，且慢慢可以不用看稿，對於我的投影片也更加熟悉，知道該在什麼時候翻頁、什麼時候用手去指。花了一個多小時練了四次，偶爾加強班下課還會有人路過來看。 在星期三的驗收，老師表示我已經足夠熟練，剩下的就是要看臨場反應，以及一定要找人試玩，我自己也發現試玩對於整個報告會有不同於我自己玩的「笑果」，讓報告變得活潑，讓觀眾產生興趣。
這次的所有圖片，包括投影片底圖都是我自己設計的，一開始要畫碰撞檢測的示意圖，調出了非常可愛的粉紅色以及粉綠色，就決定以此作為這次報告的主題色彩。
同為天涯程式人 當JSP開始，我們在一個禮堂要進行分組，分組基本上是隨便亂分啦！唯一的規則就是不要跟同校的一組。(我也沒有同校的)
特別的是，我們的組裡有一位組員也會寫程式，竟然也玩Linux作業系統，是我人生中第一次遇到同年齡也會玩Linux的(我也是他第一次遇到有人用Linux的，可見Linux的市占率&amp;hellip;)。
我們一下就聊起來了，我發現他懂的非常多。關於我很缺乏的電腦底層知識，資訊領域的各種知識，還有科學，他幾乎都知道。有時候還會知道一些很奇怪的冷知識，像是Unicode裡面的編碼，令人會心一笑。
我們也彼此分享了所做的專案，像我的 圖書管理系統、火輪手槍，他做了一個加密系統、現在正在做作業系統。
專題演講 在第二天的早上，就是專題演講的時候。
記得從小學六年級的時候，我就常常成為團隊中的發表者，對於「上台」這件事，從一開始的害怕、忐忑，到後來可以面無懼色的在台上講話，甚至對於表現開始有種興奮，開始期待，並且恨不得自己第一個上場。
科研社ㄉ特別訓練 我的「台風」，絕不是什麼演講比賽、即席演說所訓練的，而是科研社。 在科研社的兩年給了我很多時間去學習「如何發表」。我想我們學校的科研社應該跟其他學校有很大的不同，我們不常做實驗，相對的，我們不停的交流。我們常常分享彼此的想法，常常上台發表，常常把報告拖到最後一天才做。
對我而言，在科研社學到的不是科學知識，而是做研究的方法。或許你不會因此變得對某個領域非常的精熟，但你會知道如何讓自己成為那樣的人。
 在經過了前面的四組後，終於輪到了我。
我早已把筆電準備在前面，這次很堅持的使用了自己的筆電，自己設計簡報，自己設計底圖，一人團隊有些辛苦，但我的成果讓我很滿意。
  這次的演講算是出奇的成功。首先我很擅長問答，因此我往往更擅長應變實際的情況，還有就是事前的準備，這次我的指導老師很精準的預期了觀眾的反應，因此採用最低強度的演講，成功的讓所有人都感到興趣且聽的懂。
很開心的是觀眾反應非常熱烈，在報告的一開始，有安排找觀眾試玩的橋段， 原本還有些擔心會不會沒人願意上來，還好在 我事先的布局 觀眾熱烈的反應下，這個擔心不成問題，事實上還有三位觀眾願意上台呢！
最後有些時間不足，因此在程式解說之處稍微草率，但還好有時間讓我好好講結論。
在這邊我想謝謝每一位聽我演講的觀眾，我相信，一個好的演講，是需要講者與觀眾一同參與的，謝謝你們作了一個稱職的觀眾，讓我有一個好的舞台。也謝謝願意鼓起勇氣上台試玩的朋友，讓我們能一起完成一場好的演講。 請大家一定要去看影片喔！</description>
    </item>
    
    <item>
      <title>二十一天的連續早起</title>
      <link>https://wancat.cc/post/21earlyday/</link>
      <pubDate>Mon, 18 Jun 2018 08:42:03 +0000</pubDate>
      
      <guid>https://wancat.cc/post/21earlyday/</guid>
      <description>我的21earlyday計畫終於在今天結束了。 這21天，我做了生活中最大的改變，而這21天，我很享受。 所以在這結束之後，我還是會持續下去。
 什麼是21earlyday？ 它是一個Hashtag，連續21天早起的計畫。這個早起不是一般那種7點起床就算早起，而是4點5點那種，異於常人的早起。 那為什麼是21天呢？因為（據說）21天是養成一個習慣的最短時間，所以當初創辦人就選定了這個時間。 之所以有這個活動（而且挺多人響應），是為了改變生活。在我過去的日子，我是很難7點爬起來的，因為我很愛睡，但又捨不得那麼早睡，加上假日都晚睡晚起，所以讓我平常天的起床簡直痛不欲生。 我其實並沒有很在乎這些，讓我真正下定決心的原因是，增加時間。 【TED 有意識週報】連續 21 天四點半起床：我零成本創造了更多時間
在每天的早起中，無意間增加的時間 我是很熱愛軟體開發的，但讓我很不滿的是時間不足，每天上九小時的義務教育，老實說到家只想休息，大概到了晚上8, 9 點才會有精神起來「開工」（而且還要寫完作業），但是大概用沒多久就得去睡覺了。 這實在很令人洩氣，我有許多想做的事，例如開發專案、寫文章，而且這些我都會做，唯一的問題就是時間不足，因此時間不足這個煩惱蟬聯了兩屆我的輔導手冊（每個學生都有一本，用來應付教育部的謎樣物品）。因此我常常注意一些時間管理方面的文章，希望能從我現有的生活中，再壓縮出一些時間。 但說實話，我通常只能夠往睡眠時間壓縮，結果我變得越來越晚睡，11:30已經變成日常，而且問題是，當我開始工作，我會不想睡，結果在床上躺了半個小時還是睡不著，最後還得拿本書來看逼自己入眠。 再不然，就是下課後已經精神疲累，沒有精力再去忙自己的事，畢竟我的這些工作很多都是很燒腦的，在一天的尾聲，有時候就算想做也提不起勁。
早起創造更多時間的四個原因  睡一覺起來精神抖擻：累了就早點睡，早上起來有精神工作 避免滑手機浪費時間：有時晚上就是發懶，還沒到睡覺時就一直滑手機，無形中浪費許多時間 早起比早睡容易： 雖然你五點起來，但是相信我，你還是會十點睡的 避免賴床：其實&amp;hellip;只要想你起床後可以用電腦，就會馬上起床了  如果一天過完你很累的話，那第一點尤其適合你，先睡一覺再起來，早上十分安靜，而且你可以專心的做你熱愛的事。（早起打code最幸福）。 另一方面，早上是非常安靜的，很適合寫文章這一種要高度專注的活動，如果你想避免干擾，也可以試試。
二十一天的心路歷程 第一天，我五點起床，還到臉書發了個動態。第一天五點起床，很安靜，天已經有點亮了，陽光搭配我的數學鬧鐘，不難起來。 那我起來後做什麼事呢？打Code去，我沒有先吃早餐，我直接就去用電腦。事實上我早餐的食慾通常要起床一個小時候才有，所以在以前我都是帶去學校吃，因為在家裡不是沒時間，是真的吃不下。五點起床之後，我先用一個半小時的電腦，然後走到廚房自己弄一頓早餐，熱騰騰的蛋餅，一方面早餐的選擇可以更多樣化，二方面可以在家裡悠閒的吃。 有時前一晚還沒寫完作業也可以趁這兩個小時寫。
早起要做什麼？ 常常有人問我這麼早起要做什麼？做我平常會做的事啊！他們似乎認為早起是有一個「目的」，我是有目的沒錯，可是並非專為某件事而早起，而是一種生活習慣。我早起不做什麼，做我平常會做的事，可能是寫程式，可能是寫作業，也可能只是看Youtube配早餐。 那這樣跟你晚上做有差嗎？有差，真的有差，晚上一方面干擾多，不管是家人、朋友、還是你追蹤的Youtube都常常在這個時間發動態，如果在這個時間工作是很難專注的；相對的，早上幾乎沒有人起來，你可以安靜，不受干擾的動作，對我而言這差別很大。 另一方面就是上面所說，精神的問題。晚上精神差，就工作起來沒勁；如果有精神呢？恭喜你，等一下上床後就睡不著啦！事實上晚上工作真的很衰小，工作的很順就是不用睡，不順那根本沒做到工作，本質上就不適合在睡前或是晚上工作；但如果是早上爬起來，只要精神好就好，不用怕睡不著，反而待會兒上課時會更有精神。
有時候，你會睡的更少 雖然原作者說你會因為早起而更早睡，可能是我的生理時鐘仍然被太陽影響，我到了九點並不會想睡，通常是十點入眠，因此我的睡眠時間大概會是7個小時之內。 另外有時是為了朋友，我和幾個同為學習程式的朋友在星期三、六都會上線聊天，但由於他們多半是大學，或著已經出社會了，所以我們的上線時間是晚上9點。原本我都很OK，但是自從開始這個計畫後，我多半十點就得下線了，減少了彼此交流的時間。
那如果睡的很少怎麼辦？我假日仍然會補眠，只是並非用晚起來補眠，而是用早睡，假日我通常會準時九點前去睡，有一次假日跟朋友出去玩，回家太累，六點就睡著了，還沒吃晚餐，直接睡到隔天五點。
我實話說，早起並不會讓你交更多朋友，對我而言，早起的很大意義是獨處，我的很多工作都是要獨處才適合的。或許你很難忍受孤獨，但早起的孤獨並不是「孤單寂寞覺得冷」，而是自由自在。
重點不是早睡早起，重點是一致 其實原先的生活有很大的問題就是假日會整個將生活時間往後延，可能起來就已經10點了，並不是說一定要早睡早起，重點是要生活作息一致，事實上很多科學研究指出青少年本來就會比較晚睡，但是現今的社會制度是這樣我無法改變，週末晚睡當夜貓子固然很爽，也固然很安靜可以很專注，但是你不能持續啊！因為學校就是逼你7.30到校，這沒辦法改。 早起的好處是符合社會規則，你不會因為早起就被處罰，而且是可以一致、連貫的，即使是假日也能持續下去。當然現今的社會規則是很不合理的，但我們可以一邊改變，同時讓自己好過一點。
對某些人來說，早睡是奢侈的 在我開始這個計畫，大概一週後，我有一位朋友也心動了，一起參加21earlyday。但由於她平常補習甚多，每天都晚上九點半才下課，所以要「早睡」都有些困難。但她還是盡所能的早睡早起，雖然有幾天可能不小心睡到6點。 在知道後我不免懷疑，那些補習班所開出的「補到十點」課程真的有用嗎？我認為人的專注時間是有限的，在專注時間用完後你多讀也無益，就像是藥吃太多一樣。每天把學生弄到十一點才能睡覺，真的能讓學習表現變好嗎？（設問中的疑問） 我不知道，我很幸運，學業並不需要額外補習就可維持，事實上班上前幾名的同學也確實很多是有補習的，我也不反對補習，只是我很難接受為了學業把學生操到上課時間都沒精神。 事實上我的朋友也不知道，她不知道她的成績變好究竟是自己努力，還是補習造成的；是因為晚上上到9.30，還是其實8.30就足矣？
 但我想她能確定的是，她不喜歡這樣的生活，因此她開始了21earlyday。
  後記 很高興這篇文章在兩小時內迅速飆完了，也很慶幸沒有字數大爆炸。 真的由衷的喜歡現在的生活方式，也希望給看到這篇文章的你，一個改變的契機。</description>
    </item>
    
    <item>
      <title>長征 尋找沙漠之旅（一）</title>
      <link>https://wancat.cc/post/minecraft-trip/</link>
      <pubDate>Sun, 10 Jun 2018 18:38:51 +0000</pubDate>
      
      <guid>https://wancat.cc/post/minecraft-trip/</guid>
      <description>— OurLiveWorld 我們的生存故事  這是Minecraft的冒險故事系列，每篇將記載在我們世界中的一場冒險。
 星期日邀請二姐 Andrea來我們的世界，這天Andrea突然想玩麥塊，於是我們就一同騎馬去旅行，尋找沙漠。沙漠是不適合生存的，但是夜晚的沙漠十分美麗，而且有些稀有的資源，於是我們此次旅行就以沙漠為目標。
我們是騎馬旅行的，在我們的居所是天然的馬棲息地，憑藉我過去辛苦打來的裝備，我們擁有兩個鞍以及鑽石和黃金馬鎧。 說實在之所以要旅行也只是因為要找事做，麥塊跟其他遊戲不一樣，不會有固定的遊戲進度給你做，我們的冒險目前也有些卡關，需要收集更多的終界之眼。
老實說我們一開始是想要去找終界傳送門的，那時候帶著一顆終界之眼，以為一顆就可以帶我們找到，想不到才使用兩次它就破了。 破了，但也沒有備用的了，那就去旅行吧！我們就不管，朝著原先終界之眼指向的方向繼續前進。
在我們的家後方的山脈，裡面是杉木林，在Minecraft的所有樹林中，我最喜歡的就是杉木林了，理由其實也挺老套，因為樹幹與樹葉的顏色很和諧，樹幹又高，葉子也不多，有如高緯度地區的針葉林，很優雅。
在裡面穿梭不久，我們遇到了狼群。狼被馴服後是很有用的，當你戰鬥時，狼會為你而戰。可惜我們為了節省空間，並沒有攜帶用來馴服狼的骨頭，在討論後，我們決定晚一天啟程，先回家裡拿骨頭，再出發。回到了那片森林，我和Andrea各馴服了兩隻狼，有兩隻往後就能生更多小狼。
雪山 在穿越了幾處森林後，我們到達了一處雪山。我們下馬玩雪，在路途中我有收集到南瓜，於是我們拿鏟子挖了些雪，開始堆雪人。
Andrea以前沒看過雪，覺得很新奇，就拿著雪球到處亂丟動物，在我堆好雪人之後，我們的攻擊目標就轉移到雪人身上了。對雪人丟雪球很有趣，你會看到它被打到後跳一下。我想要試試看能不能把雪人的南瓜頭脫下來，於是走上前去用手打它，我忘記我有狼了，我的狼就衝上去把它給咬死了……，我們看著這荒謬的結果，兩個人大笑起來，超級沒有意義，我們就這樣很沒有意義的過了一個白天。
夜晚很快的降臨了，為了更好的視野，我們爬上山頂，由於山地不適合連夜趕路，於是我們停在山上，插上幾根火把就算是紮營了。之所以不睡覺，是為了保持家裡的重生點，所以每每出外旅行，我們都不會帶床的。由於是騎馬，所以在晚上趕路其實不太危險，看到怪物只要快速通過即可，不需要戰鬥，如果真的要戰鬥也不會在馬背上，一方面攻擊力下降，二方面難操作又會怕傷到馬。 為了餵飽我們的一群狼，在沿路上我們也獵殺了許多動物，晚上紮營就是烤肉的最佳時刻。沒想到會需要烤肉，所以當初也沒有帶煤炭，幸好煤炭「俯拾皆是」，我們在附近的山壁上就挖掘到了足以使用的煤炭。
在夜晚過了約莫一半，天空開始下雪了，白色雪花從天空中緩緩的旋轉、飄落，比起下雨等其他天氣，下雪真的十分美麗。我們看到白天為了堆雪人而鏟開的地面，又漸漸的覆蓋上一層潔白的雪。從山頂望去，盡是杉木林與一座又一座的山頭，仰頭望向天空，看到一大片雪花從漆黑的天空落下，繞著我們打轉。這正是為什麼我喜歡杉木林與雪山，高緯度地區雖然不適合生存，但是有種極簡的美。
寒漠 白天後，我們下山繼續前進。看到眼見所及之內全部都是雪地，但是我們的海拔明明已經沒那麼高了，遠處還看見冰川與北極熊，我傻住了，我們竟然到了寒漠。
寒漠是一個類似北極的地方，一大片一望無際的雪地，就像是沙漠改成下雪了一般。寒漠中的河流與湖泊都會凍結成冰，人可以行走在上面。走一走還能在路上遇到北極熊，幸好在Minecraft裡牠不是保育類動物。 北極熊不好惹，我之前知道牠是中立生物（註1），想不到我只是離牠很近，牠就開始攻擊我了。我的狼看到我被攻擊，全部衝上前去，結果一群動物在打群架。北極熊的血很厚，而且攻擊力很痛，我的狼群有幾隻被打到快掛了。幸好最後還是把牠給殺死了，往後為了避免再發生這種危險的戰事，我和Andrea都離北極熊遠遠的。
我們抵達寒漠後，開始懷疑自己走的方向是不是正確的？
 「你確定要走這？我們都已經走到寒漠了，怎麼想都是在遠離沙漠」 「麥塊應該沒有緯度這種設計，我想我們一直走還是能到達的」
 馬在寒漠中挺好走的，對馬而言最難走的莫過於樹林，尤其是矮小的樺木與橡木林，常常卡住頭，寸步難行。在寒漠中，不但沒有卡住頭的問題，河都結冰了，可以很方便的過河。
註1 中立生物：一個生物在某些條件下才具有攻擊性稱為中立生物，例如野狼、蜘蛛、終界使者、殭屍豬人等。
那是…骷公!? 在寒漠中的第一天晚上，我們在寒漠上隨便找了個地方落腳，點了些火把，就靜靜的一邊烤肉，一邊等著白天。 突然，我被弓箭給攻擊了，我的狼群衝了出去，要找攻擊者。我跟著出去，看到一個從沒見過的生物。
 「天啊!那是…骷公嗎!?」
 眼前一個身穿破爛綠袍的人形生物，他眼睛是白色的，身上的衣服破得像是綠藻黏在身上，手持一把弓，現在正架著弓箭瞄準我。 我想要追上前，但腳步似乎被拖住，變得很慢。
我的狼看到了它，衝上前去追趕。這生物似乎也知道要怕狼，竟然放下手上弓箭，開始逃命。 我就待在原地，看著一個衣衫襤褸的莫名生物被我的一大群狼追趕，這個畫面非常逗趣，平常神氣的骷公，在狼群的追逐下也不得不屈服。 那個形似骷髏的生物後來朝向我這跑來，我便拿起我的附魔鑽劍，將他給斬殺，結束他這荒謬的一生。 我打開背包，找到之前腳步變慢的原因，原來我中了緩速效果(註1)，在殺死這個奇怪生物後，我撿到了一支「緩速之箭」（註2）。
事後我上網查，原來這個生物是「流浪者」，骷公的變種，專門生於寒漠地區。實際上這種生物是很危險的，因為你被射中後跑不快，很難接近它，只是因為我有狼，才會那麼好打。
註1 緩速效果：為麥塊中的藥水效果之一，使人速度變慢。 註2 緩速之箭：藥水箭之一，被射中後會得到緩速效果
大陸邊際 我們就這樣日以繼夜的不停趕路，(夜晚也可以走，由於速度很快，不擔心怪物來襲)，在大概走了三天後，我們走出了寒漠。
 「這是…」
 我們到達了海岸，但是一眼望去完全看不到陸地，眼前只有一整片波濤洶湧的大海。 這下子可真的麻煩了，我們騎馬，沒有辦法過水用划船的。 但是我們仍然不放棄，繼續繞路，穿越了幾座森林，勉強的朝向第一象限邁進，但每次繞路後，總是又碰到了大海，不然就根本是在走回頭路。
這樣子繞路了幾天，有一次，我們穿越了一大片樺木林，到達海邊。 那天我們紮營的位置很糟，在一個陡峭的小山丘上，周圍又滿滿的樹，連好好停馬的位置都沒有。
那天晚上我們烤著肉，一邊應付從四周來的零星怪物，眼看著第一象限的方向一眼望盡全部都是大海。
 「我想…我們回頭吧！」
 回程 我們決定要返家了，當我們要回頭時，座標已經離家有好一段距離，約莫3500座標單位。 我們筆直的朝向家的方向 — 第三象限前進，不過可以預知到一個一個問題，會碰到海。我們來的時候走得是彎彎曲曲，遇到海就繞路，但是一路上我們並沒有紀錄座標，因此很難沿著過去走的路原路回家。 一開始還算順遂，在走出樹林後，再度回到了寒漠中，但是在寒漠中快速奔馳不久，就撞海了。
時間也不早了，由於隔天還要上課，我們便在此登出。</description>
    </item>
    
    <item>
      <title>Archive</title>
      <link>https://wancat.cc/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wancat.cc/archives/</guid>
      <description>archives</description>
    </item>
    
    <item>
      <title>Search</title>
      <link>https://wancat.cc/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wancat.cc/search/</guid>
      <description>search</description>
    </item>
    
    <item>
      <title>支持我</title>
      <link>https://wancat.cc/donate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wancat.cc/donate/</guid>
      <description>Monero 門羅幣 XMR：
8AUiRg1M37E8d9N8bCR2t8KZenQegjZnvGgj5mU9Dp6GSJsbR9TfaxRfpDj6sakm4g1PCWigftaFBXD83owaFrc3BWHHkPy BitCoin 比特幣 BTC：</description>
    </item>
    
    <item>
      <title>關於我</title>
      <link>https://wancat.cc/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wancat.cc/about/</guid>
      <description>我是一個軟體開發者，現就讀五專。我重視自由軟體，喜歡 self-hosting，在家裡有一台 Proxmox VE 來跑許多服務。我討厭 MAGAFT：Microsoft、Amazon、Google、Apple、Facebook、Twitter，我推崇 Email、XMPP、Matrix、Mastodon、RSS 等䏈邦式系統，讓使用者有選擇的自由。我相信改變只能從使用習慣著手，願能透過我的寫作，讓更多人看見自由的重要，改變這被 Big Tech 支配的世界。
Skills  Golang JavaScript Vanilla JS Django React Native Linux Administration  專案  ImageNotebook 影像轉正與整理軟體 AddaBound LINE 跨䏈天室通訊小郵差 FeverPass 體溫記錄系統 排列組合計算機 股票紅綠燈 Go 寫的股票爬蟲網站  我的連結  Matters GitHub XMPP: wancat@chat.linchpins.cloud Matrix: @wancat:linchpins.cloud Email: wancat@wancat.cc  </description>
    </item>
    
  </channel>
</rss>
